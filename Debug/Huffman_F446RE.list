
Huffman_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004704  08004704  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800470c  0800470c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e20  2000007c  08004790  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e9c  08004790  00020e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132a7  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ed  00000000  00000000  00033353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00035d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  000365c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c08  00000000  00000000  00036d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e195  00000000  00000000  0005a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f22  00000000  00000000  00068ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132a07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  00132a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d14 	.word	0x08003d14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08003d14 	.word	0x08003d14

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <nouveauNoeud>:
  /*==============================================================================
**                           Public Functions                                   **
================================================================================*/

void nouveauNoeud(noeud *arbre[MAX_ARRAY], uint8_t taille)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
    int i=0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]

    printf("--> Creation des nouveaux noeuds: nouveauNoeud()\r\n");
 80005b8:	481e      	ldr	r0, [pc, #120]	; (8000634 <nouveauNoeud+0x8c>)
 80005ba:	f002 fd0f 	bl	8002fdc <puts>

    noeud *tmp = malloc(sizeof(noeud)); //tmp->c = '!';
 80005be:	2010      	movs	r0, #16
 80005c0:	f002 fbcc 	bl	8002d5c <malloc>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60bb      	str	r3, [r7, #8]
    tmp->occurence = arbre[0]->occurence + arbre[1]->occurence;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	885a      	ldrh	r2, [r3, #2]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3304      	adds	r3, #4
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	885b      	ldrh	r3, [r3, #2]
 80005d6:	4413      	add	r3, r2
 80005d8:	b29a      	uxth	r2, r3
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	805a      	strh	r2, [r3, #2]
    tmp->gauche    = arbre[0];
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	609a      	str	r2, [r3, #8]
    tmp->droite    = arbre[1];
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	60da      	str	r2, [r3, #12]
    arbre[0] = tmp;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	601a      	str	r2, [r3, #0]

    for( i=1; i<taille; i++ ) { arbre[i] = arbre[i+1]; } // Decalage d'une case vers le haut du tableau
 80005f4:	2301      	movs	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	e00d      	b.n	8000616 <nouveauNoeud+0x6e>
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	441a      	add	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	440b      	add	r3, r1
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	429a      	cmp	r2, r3
 800061c:	dbed      	blt.n	80005fa <nouveauNoeud+0x52>
    arbre[taille] = 0; // Suppression du dernier elements
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	08003d2c 	.word	0x08003d2c

08000638 <constructionArbreBinaire>:

void constructionArbreBinaire(noeud *arbre[256], uint8_t taille)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
    int i=0;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]

    for( i=0; i< taille ; i++ )
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e00f      	b.n	800066e <constructionArbreBinaire+0x36>
    {
        nouveauNoeud(arbre, taille);
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	4619      	mov	r1, r3
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ffa8 	bl	80005a8 <nouveauNoeud>
        triArbreHuffman(arbre, taille-i-1);
 8000658:	78fa      	ldrb	r2, [r7, #3]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	3b01      	subs	r3, #1
 8000660:	4619      	mov	r1, r3
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 fc4c 	bl	8000f00 <triArbreHuffman>
    for( i=0; i< taille ; i++ )
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3301      	adds	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	429a      	cmp	r2, r3
 8000674:	dbeb      	blt.n	800064e <constructionArbreBinaire+0x16>
    }

	afficherRacineArbre(arbre[0]);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f804 	bl	8000688 <afficherRacineArbre>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <afficherRacineArbre>:


void afficherRacineArbre(noeud *arbre)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
    printf( "Racine de l'arbre:\r\n" );
 8000690:	480f      	ldr	r0, [pc, #60]	; (80006d0 <afficherRacineArbre+0x48>)
 8000692:	f002 fca3 	bl	8002fdc <puts>
    printf("|---------------------------------------------------------|\r\n");
 8000696:	480f      	ldr	r0, [pc, #60]	; (80006d4 <afficherRacineArbre+0x4c>)
 8000698:	f002 fca0 	bl	8002fdc <puts>
    printf("|   NbrCarac |    Adresse   |    Gauche    |    Droite    |\r\n");
 800069c:	480e      	ldr	r0, [pc, #56]	; (80006d8 <afficherRacineArbre+0x50>)
 800069e:	f002 fc9d 	bl	8002fdc <puts>
    printf("|------------|--------------|--------------|--------------|\r\n");
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <afficherRacineArbre+0x54>)
 80006a4:	f002 fc9a 	bl	8002fdc <puts>
    printf("| %10d |  %10p  |  %10p  |  %10p  |\r\n", arbre->occurence, arbre, arbre->gauche, arbre->droite);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	885b      	ldrh	r3, [r3, #2]
 80006ac:	4619      	mov	r1, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	4613      	mov	r3, r2
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <afficherRacineArbre+0x58>)
 80006be:	f002 fc07 	bl	8002ed0 <iprintf>
    printf("|---------------------------------------------------------|\r\n\r\n");
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <afficherRacineArbre+0x5c>)
 80006c4:	f002 fc8a 	bl	8002fdc <puts>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	08003d60 	.word	0x08003d60
 80006d4:	08003d74 	.word	0x08003d74
 80006d8:	08003db4 	.word	0x08003db4
 80006dc:	08003df4 	.word	0x08003df4
 80006e0:	08003e34 	.word	0x08003e34
 80006e4:	08003e5c 	.word	0x08003e5c

080006e8 <creerFeuille>:
  /*==============================================================================
**                           Public Functions                                   **
================================================================================*/

void creerFeuille( noeud *arbre[MAX_ARRAY], uint8_t tab[MAX_ARRAY] )
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
    int i=0,j=0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]

    printf( "--> On cree l'arbre de Huffman: creerFeuille() \r\n" );
 80006fa:	4829      	ldr	r0, [pc, #164]	; (80007a0 <creerFeuille+0xb8>)
 80006fc:	f002 fc6e 	bl	8002fdc <puts>

    for ( i=0; i<MAX_ARRAY; i++ )
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	e043      	b.n	800078e <creerFeuille+0xa6>
    {
        if( tab[i]!=0 )
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	4413      	add	r3, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d03a      	beq.n	8000788 <creerFeuille+0xa0>
        {
            arbre[j] = malloc(sizeof(noeud));   // On conserve l'@
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	18d4      	adds	r4, r2, r3
 800071a:	2010      	movs	r0, #16
 800071c:	f002 fb1e 	bl	8002d5c <malloc>
 8000720:	4603      	mov	r3, r0
 8000722:	6023      	str	r3, [r4, #0]
            arbre[j]->c = i;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	701a      	strb	r2, [r3, #0]
            arbre[j]->occurence = tab[i];
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	4413      	add	r3, r2
 800073a:	7819      	ldrb	r1, [r3, #0]
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	b28a      	uxth	r2, r1
 8000748:	805a      	strh	r2, [r3, #2]
            arbre[j]->code = 0;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	809a      	strh	r2, [r3, #4]
            arbre[j]->tailleCode = 0;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	705a      	strb	r2, [r3, #1]
            arbre[j]->gauche = NULL;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
            arbre[j]->droite = NULL;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
            j++;
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	3301      	adds	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
    for ( i=0; i<MAX_ARRAY; i++ )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3301      	adds	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2bff      	cmp	r3, #255	; 0xff
 8000792:	ddb8      	ble.n	8000706 <creerFeuille+0x1e>
        }
    }
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	bf00      	nop
 80007a0:	08003e9c 	.word	0x08003e9c

080007a4 <afficherTableauArbreHuffman>:

void afficherTableauArbreHuffman( noeud *arbre[MAX_ARRAY] )
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    int i=0,j=0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]

    printf( "Adresses des caractere:\r\n" );
 80007b4:	481a      	ldr	r0, [pc, #104]	; (8000820 <afficherTableauArbreHuffman+0x7c>)
 80007b6:	f002 fc11 	bl	8002fdc <puts>

    printf("|---------------------------------------|\r\n");
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <afficherTableauArbreHuffman+0x80>)
 80007bc:	f002 fc0e 	bl	8002fdc <puts>
    printf("|   Indice  |    Adresse   |  Caractere |\r\n");
 80007c0:	4819      	ldr	r0, [pc, #100]	; (8000828 <afficherTableauArbreHuffman+0x84>)
 80007c2:	f002 fc0b 	bl	8002fdc <puts>
    printf("|-----------|--------------|------------|\r\n");
 80007c6:	4819      	ldr	r0, [pc, #100]	; (800082c <afficherTableauArbreHuffman+0x88>)
 80007c8:	f002 fc08 	bl	8002fdc <puts>
    for( i=0; i<MAX_ARRAY; i++ )
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	e01c      	b.n	800080c <afficherTableauArbreHuffman+0x68>
    {
        if( arbre[i]!=0)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d012      	beq.n	8000806 <afficherTableauArbreHuffman+0x62>
        {
            printf( "|%10d |  %10p  | %10c |\r\n", i, arbre[j], arbre[j]->c );
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	6819      	ldr	r1, [r3, #0]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	460a      	mov	r2, r1
 80007f8:	68f9      	ldr	r1, [r7, #12]
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <afficherTableauArbreHuffman+0x8c>)
 80007fc:	f002 fb68 	bl	8002ed0 <iprintf>
            j++;
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	3301      	adds	r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
    for( i=0; i<MAX_ARRAY; i++ )
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2bff      	cmp	r3, #255	; 0xff
 8000810:	dddf      	ble.n	80007d2 <afficherTableauArbreHuffman+0x2e>
        }
    }
    printf("|---------------------------------------|\r\n\r\n");
 8000812:	4808      	ldr	r0, [pc, #32]	; (8000834 <afficherTableauArbreHuffman+0x90>)
 8000814:	f002 fbe2 	bl	8002fdc <puts>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08003ed0 	.word	0x08003ed0
 8000824:	08003eec 	.word	0x08003eec
 8000828:	08003f18 	.word	0x08003f18
 800082c:	08003f44 	.word	0x08003f44
 8000830:	08003f70 	.word	0x08003f70
 8000834:	08003f8c 	.word	0x08003f8c

08000838 <afficherArbreHuffman>:

void afficherArbreHuffman( noeud *arbre[MAX_ARRAY] )
{
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af04      	add	r7, sp, #16
 800083e:	6078      	str	r0, [r7, #4]
    int i=0,j=0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]

    printf( "Tableau Huffman Complet:\r\n" );
 8000848:	482e      	ldr	r0, [pc, #184]	; (8000904 <afficherArbreHuffman+0xcc>)
 800084a:	f002 fbc7 	bl	8002fdc <puts>

    printf("|------------------------------------------------------------------------------------------------|\r\n");
 800084e:	482e      	ldr	r0, [pc, #184]	; (8000908 <afficherArbreHuffman+0xd0>)
 8000850:	f002 fbc4 	bl	8002fdc <puts>
    printf("|  Caractere |  Occurrence|    Code    |   Taille   |    Adresse   |    Gauche    |    Droite    |\r\n");
 8000854:	482d      	ldr	r0, [pc, #180]	; (800090c <afficherArbreHuffman+0xd4>)
 8000856:	f002 fbc1 	bl	8002fdc <puts>
    printf("|------------|------------|------------|------------|--------------|-----------------------------|\r\n");
 800085a:	482d      	ldr	r0, [pc, #180]	; (8000910 <afficherArbreHuffman+0xd8>)
 800085c:	f002 fbbe 	bl	8002fdc <puts>
    for( i=0; i<MAX_ARRAY; i++ )
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	e043      	b.n	80008ee <afficherArbreHuffman+0xb6>
    {
        if( arbre[i] != 0 )
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d039      	beq.n	80008e8 <afficherArbreHuffman+0xb0>
        {
            printf("| %10c | %10d | %10lu | %10d |  %10p  |  %10p  |  %10p  |\r\n", arbre[j]->c, arbre[j]->occurence, arbre[j]->code, arbre[j]->tailleCode, arbre[j], arbre[j]->gauche, arbre[j]->droite);
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461d      	mov	r5, r3
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	885b      	ldrh	r3, [r3, #2]
 800088e:	461e      	mov	r6, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	889b      	ldrh	r3, [r3, #4]
 800089c:	469c      	mov	ip, r3
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	785b      	ldrb	r3, [r3, #1]
 80008aa:	461c      	mov	r4, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	440a      	add	r2, r1
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	6892      	ldr	r2, [r2, #8]
 80008c2:	68b9      	ldr	r1, [r7, #8]
 80008c4:	0089      	lsls	r1, r1, #2
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	4401      	add	r1, r0
 80008ca:	6809      	ldr	r1, [r1, #0]
 80008cc:	68c9      	ldr	r1, [r1, #12]
 80008ce:	9103      	str	r1, [sp, #12]
 80008d0:	9202      	str	r2, [sp, #8]
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	9400      	str	r4, [sp, #0]
 80008d6:	4663      	mov	r3, ip
 80008d8:	4632      	mov	r2, r6
 80008da:	4629      	mov	r1, r5
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <afficherArbreHuffman+0xdc>)
 80008de:	f002 faf7 	bl	8002ed0 <iprintf>
            j++;
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
    for( i=0; i<MAX_ARRAY; i++ )
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3301      	adds	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2bff      	cmp	r3, #255	; 0xff
 80008f2:	ddb8      	ble.n	8000866 <afficherArbreHuffman+0x2e>
        }

    }
    printf("|------------------------------------------------------------------------------------------------|\r\n\r\n");
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <afficherArbreHuffman+0xe0>)
 80008f6:	f002 fb71 	bl	8002fdc <puts>
}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000902:	bf00      	nop
 8000904:	08003fbc 	.word	0x08003fbc
 8000908:	08003fd8 	.word	0x08003fd8
 800090c:	0800403c 	.word	0x0800403c
 8000910:	080040a0 	.word	0x080040a0
 8000914:	08004104 	.word	0x08004104
 8000918:	08004140 	.word	0x08004140

0800091c <getAdress_recursif>:
  /*==============================================================================
**                           Public Functions                                   **
================================================================================*/

noeud *getAdress_recursif(noeud *ptrNoeud, uint8_t caractere, noeud *Adresse)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	460b      	mov	r3, r1
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	72fb      	strb	r3, [r7, #11]
	if( ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL )
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10c      	bne.n	800094c <getAdress_recursif+0x30>
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d108      	bne.n	800094c <getAdress_recursif+0x30>
    {
    	if( ptrNoeud->c == caractere )
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	7afa      	ldrb	r2, [r7, #11]
 8000940:	429a      	cmp	r2, r3
 8000942:	d101      	bne.n	8000948 <getAdress_recursif+0x2c>
    	{
    		return ptrNoeud;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	e018      	b.n	800097a <getAdress_recursif+0x5e>
    	}
    	else
    		return 0;
 8000948:	2300      	movs	r3, #0
 800094a:	e016      	b.n	800097a <getAdress_recursif+0x5e>
    }
    else
    {
    	if(Adresse==0) { Adresse = getAdress_recursif( ptrNoeud->droite, caractere, Adresse ); }
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d107      	bne.n	8000962 <getAdress_recursif+0x46>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	7af9      	ldrb	r1, [r7, #11]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ffde 	bl	800091c <getAdress_recursif>
 8000960:	6078      	str	r0, [r7, #4]
    	if(Adresse==0) { Adresse = getAdress_recursif( ptrNoeud->gauche, caractere, Adresse ); }
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d107      	bne.n	8000978 <getAdress_recursif+0x5c>
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	7af9      	ldrb	r1, [r7, #11]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ffd3 	bl	800091c <getAdress_recursif>
 8000976:	6078      	str	r0, [r7, #4]
    }

	return Adresse;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <compresssionTexte>:

uint16_t compresssionTexte(uint8_t *chaine, noeud *ptrNoeud, uint16_t texteCompress[TAILLE])
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	uint8_t  i=0,colonne=0,bit=0;
 8000990:	2300      	movs	r3, #0
 8000992:	77fb      	strb	r3, [r7, #31]
 8000994:	2300      	movs	r3, #0
 8000996:	75fb      	strb	r3, [r7, #23]
 8000998:	2300      	movs	r3, #0
 800099a:	75bb      	strb	r3, [r7, #22]
	uint16_t ligne=0,rangBit=0;
 800099c:	2300      	movs	r3, #0
 800099e:	82bb      	strh	r3, [r7, #20]
 80009a0:	2300      	movs	r3, #0
 80009a2:	83bb      	strh	r3, [r7, #28]
	int j=0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]

	printf("--> Test Compression: CompressionTexte()\r\n");
 80009a8:	4830      	ldr	r0, [pc, #192]	; (8000a6c <compresssionTexte+0xe8>)
 80009aa:	f002 fb17 	bl	8002fdc <puts>

	while(chaine[i]!='\0')
 80009ae:	e04f      	b.n	8000a50 <compresssionTexte+0xcc>
	{
		noeud *tmp = (getAdress_recursif( ptrNoeud, chaine[i], 0 ));
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	68b8      	ldr	r0, [r7, #8]
 80009be:	f7ff ffad 	bl	800091c <getAdress_recursif>
 80009c2:	6138      	str	r0, [r7, #16]

		for( j=(tmp->tailleCode)-1; j>=0; j-- )//for( j=0; j<tmp->tailleCode; j++ )
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	e037      	b.n	8000a3e <compresssionTexte+0xba>
		{
			bit = (tmp->code&(1<<j))>>j ;
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	889b      	ldrh	r3, [r3, #4]
 80009d2:	4619      	mov	r1, r3
 80009d4:	2201      	movs	r2, #1
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	ea01 0203 	and.w	r2, r1, r3
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa42 f303 	asr.w	r3, r2, r3
 80009e6:	75bb      	strb	r3, [r7, #22]

			ligne = rangBit>>3;
 80009e8:	8bbb      	ldrh	r3, [r7, #28]
 80009ea:	08db      	lsrs	r3, r3, #3
 80009ec:	82bb      	strh	r3, [r7, #20]
			colonne = rangBit%8;
 80009ee:	8bbb      	ldrh	r3, [r7, #28]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	75fb      	strb	r3, [r7, #23]
			printf("Ecriture de %d -> [%d %d] %lu\r\n", bit, ligne, colonne, tmp->code);
 80009f8:	7db9      	ldrb	r1, [r7, #22]
 80009fa:	8aba      	ldrh	r2, [r7, #20]
 80009fc:	7df8      	ldrb	r0, [r7, #23]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	889b      	ldrh	r3, [r3, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4603      	mov	r3, r0
 8000a06:	481a      	ldr	r0, [pc, #104]	; (8000a70 <compresssionTexte+0xec>)
 8000a08:	f002 fa62 	bl	8002ed0 <iprintf>

			texteCompress[ligne] |= bit<<colonne;
 8000a0c:	8abb      	ldrh	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	b21a      	sxth	r2, r3
 8000a18:	7db9      	ldrb	r1, [r7, #22]
 8000a1a:	7dfb      	ldrb	r3, [r7, #23]
 8000a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b219      	sxth	r1, r3
 8000a26:	8abb      	ldrh	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b28a      	uxth	r2, r1
 8000a30:	801a      	strh	r2, [r3, #0]
			rangBit++;
 8000a32:	8bbb      	ldrh	r3, [r7, #28]
 8000a34:	3301      	adds	r3, #1
 8000a36:	83bb      	strh	r3, [r7, #28]
		for( j=(tmp->tailleCode)-1; j>=0; j-- )//for( j=0; j<tmp->tailleCode; j++ )
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dac4      	bge.n	80009ce <compresssionTexte+0x4a>
		}
		i++; printf("SUIVANT\r\n");
 8000a44:	7ffb      	ldrb	r3, [r7, #31]
 8000a46:	3301      	adds	r3, #1
 8000a48:	77fb      	strb	r3, [r7, #31]
 8000a4a:	480a      	ldr	r0, [pc, #40]	; (8000a74 <compresssionTexte+0xf0>)
 8000a4c:	f002 fac6 	bl	8002fdc <puts>
	while(chaine[i]!='\0')
 8000a50:	7ffb      	ldrb	r3, [r7, #31]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1a9      	bne.n	80009b0 <compresssionTexte+0x2c>
	}
	printf("  Fin compression\r\n");
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <compresssionTexte+0xf4>)
 8000a5e:	f002 fabd 	bl	8002fdc <puts>

	return rangBit;
 8000a62:	8bbb      	ldrh	r3, [r7, #28]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	080041a8 	.word	0x080041a8
 8000a70:	080041d4 	.word	0x080041d4
 8000a74:	080041f4 	.word	0x080041f4
 8000a78:	08004200 	.word	0x08004200

08000a7c <afficherTexteCompresse>:

void afficherTexteCompresse( uint16_t texteCompress[TAILLE], int16_t tailleC )
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
	int i=0,j=0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]

	printf("Texte Compresse sur 3 cases mémoires\r\n");
 8000a90:	481e      	ldr	r0, [pc, #120]	; (8000b0c <afficherTexteCompresse+0x90>)
 8000a92:	f002 faa3 	bl	8002fdc <puts>
	for( i=0; i<(tailleC/8)+1; i++ )
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e025      	b.n	8000ae8 <afficherTexteCompresse+0x6c>
	{
		printf("[%3d]", i);
 8000a9c:	68f9      	ldr	r1, [r7, #12]
 8000a9e:	481c      	ldr	r0, [pc, #112]	; (8000b10 <afficherTexteCompresse+0x94>)
 8000aa0:	f002 fa16 	bl	8002ed0 <iprintf>
		for( j=0; j<8; j++ )
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	e015      	b.n	8000ad6 <afficherTexteCompresse+0x5a>
		{
			printf("%d ", (texteCompress[i]&(1<<j))>>j);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	ea01 0203 	and.w	r2, r1, r3
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	fa42 f303 	asr.w	r3, r2, r3
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4812      	ldr	r0, [pc, #72]	; (8000b14 <afficherTexteCompresse+0x98>)
 8000acc:	f002 fa00 	bl	8002ed0 <iprintf>
		for( j=0; j<8; j++ )
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2b07      	cmp	r3, #7
 8000ada:	dde6      	ble.n	8000aaa <afficherTexteCompresse+0x2e>
		}
		printf("\r\n");
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <afficherTexteCompresse+0x9c>)
 8000ade:	f002 fa7d 	bl	8002fdc <puts>
	for( i=0; i<(tailleC/8)+1; i++ )
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	da00      	bge.n	8000af2 <afficherTexteCompresse+0x76>
 8000af0:	3307      	adds	r3, #7
 8000af2:	10db      	asrs	r3, r3, #3
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4293      	cmp	r3, r2
 8000afc:	ddce      	ble.n	8000a9c <afficherTexteCompresse+0x20>
	}
	printf("\r\n");
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <afficherTexteCompresse+0x9c>)
 8000b00:	f002 fa6c 	bl	8002fdc <puts>
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08004214 	.word	0x08004214
 8000b10:	0800423c 	.word	0x0800423c
 8000b14:	08004244 	.word	0x08004244
 8000b18:	08004248 	.word	0x08004248

08000b1c <creationEntete>:
#include "EnteteHuffman.h"
#include "Compressiontexte.h"

void creationEntete( uint16_t entete[100], uint16_t tFichierC, uint16_t nbrCaractereTotal, uint8_t tab[256], noeud *ptrNoeud )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	460b      	mov	r3, r1
 8000b28:	817b      	strh	r3, [r7, #10]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	813b      	strh	r3, [r7, #8]
	uint8_t i=0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	75fb      	strb	r3, [r7, #23]

	entete[0] = 3;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2203      	movs	r2, #3
 8000b36:	801a      	strh	r2, [r3, #0]

	for( i=0; i<255; i++ )
 8000b38:	2300      	movs	r3, #0
 8000b3a:	75fb      	strb	r3, [r7, #23]
 8000b3c:	e04e      	b.n	8000bdc <creationEntete+0xc0>
	{
	    if( tab[i]!=0 )
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d045      	beq.n	8000bd6 <creationEntete+0xba>
	    {
	    	noeud *tmp = getAdress_recursif( ptrNoeud, i, 0 );
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4619      	mov	r1, r3
 8000b50:	6a38      	ldr	r0, [r7, #32]
 8000b52:	f7ff fee3 	bl	800091c <getAdress_recursif>
 8000b56:	6138      	str	r0, [r7, #16]

	    	entete[entete[0]] = tmp->c;
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	7819      	ldrb	r1, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	4413      	add	r3, r2
 8000b66:	b28a      	uxth	r2, r1
 8000b68:	801a      	strh	r2, [r3, #0]
	    	entete[0]++;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	801a      	strh	r2, [r3, #0]

	    	entete[entete[0]] = tmp->code>>8;
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	889a      	ldrh	r2, [r3, #4]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	68f9      	ldr	r1, [r7, #12]
 8000b82:	440b      	add	r3, r1
 8000b84:	0a12      	lsrs	r2, r2, #8
 8000b86:	b292      	uxth	r2, r2
 8000b88:	801a      	strh	r2, [r3, #0]
	    	entete[0]++;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	801a      	strh	r2, [r3, #0]

	        entete[entete[0]] = (tmp->code<<8)>>8;
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	1219      	asrs	r1, r3, #8
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b28a      	uxth	r2, r1
 8000baa:	801a      	strh	r2, [r3, #0]
	        entete[0]++;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	801a      	strh	r2, [r3, #0]

	    	entete[entete[0]] = tmp->tailleCode;
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	7859      	ldrb	r1, [r3, #1]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b28a      	uxth	r2, r1
 8000bc8:	801a      	strh	r2, [r3, #0]
	    	entete[0]++;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	801a      	strh	r2, [r3, #0]
	for( i=0; i<255; i++ )
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	75fb      	strb	r3, [r7, #23]
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	2bff      	cmp	r3, #255	; 0xff
 8000be0:	d1ad      	bne.n	8000b3e <creationEntete+0x22>
	    }
	}
	entete[1] = tFichierC;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3302      	adds	r3, #2
 8000be6:	897a      	ldrh	r2, [r7, #10]
 8000be8:	801a      	strh	r2, [r3, #0]
	entete[2] = nbrCaractereTotal;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3304      	adds	r3, #4
 8000bee:	893a      	ldrh	r2, [r7, #8]
 8000bf0:	801a      	strh	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <afficherEntete>:

void afficherEntete( uint16_t entete[100] )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	uint16_t i=0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	81fb      	strh	r3, [r7, #14]

	printf("Taille entete = %d\r\n", entete[0]);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4825      	ldr	r0, [pc, #148]	; (8000ca4 <afficherEntete+0xa8>)
 8000c10:	f002 f95e 	bl	8002ed0 <iprintf>
	printf("Taille fichierC = %d\r\n", entete[1]);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3302      	adds	r3, #2
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4822      	ldr	r0, [pc, #136]	; (8000ca8 <afficherEntete+0xac>)
 8000c1e:	f002 f957 	bl	8002ed0 <iprintf>
	printf("Taille nbrCaractereTotal = %d\r\n", entete[2]);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3304      	adds	r3, #4
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4820      	ldr	r0, [pc, #128]	; (8000cac <afficherEntete+0xb0>)
 8000c2c:	f002 f950 	bl	8002ed0 <iprintf>

	printf("+-------+---------+--------+\r\n");
 8000c30:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <afficherEntete+0xb4>)
 8000c32:	f002 f9d3 	bl	8002fdc <puts>
	printf("| ASCII | Huffman | Taille |\r\n");
 8000c36:	481f      	ldr	r0, [pc, #124]	; (8000cb4 <afficherEntete+0xb8>)
 8000c38:	f002 f9d0 	bl	8002fdc <puts>
	printf("+-------+---------+--------+\r\n");
 8000c3c:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <afficherEntete+0xb4>)
 8000c3e:	f002 f9cd 	bl	8002fdc <puts>
	for( i=3; i<entete[0]; i+=4 )
 8000c42:	2303      	movs	r3, #3
 8000c44:	81fb      	strh	r3, [r7, #14]
 8000c46:	e021      	b.n	8000c8c <afficherEntete+0x90>
	{
		printf("| %5c | %7d | %6d |\r\n", entete[i], ((entete[i+1]<<8)+entete[i+2]), entete[i+3]);
 8000c48:	89fb      	ldrh	r3, [r7, #14]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	89fb      	ldrh	r3, [r7, #14]
 8000c56:	3301      	adds	r3, #1
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	89fa      	ldrh	r2, [r7, #14]
 8000c64:	3202      	adds	r2, #2
 8000c66:	0052      	lsls	r2, r2, #1
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	440a      	add	r2, r1
 8000c6c:	8812      	ldrh	r2, [r2, #0]
 8000c6e:	1899      	adds	r1, r3, r2
 8000c70:	89fb      	ldrh	r3, [r7, #14]
 8000c72:	3303      	adds	r3, #3
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	4601      	mov	r1, r0
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <afficherEntete+0xbc>)
 8000c82:	f002 f925 	bl	8002ed0 <iprintf>
	for( i=3; i<entete[0]; i+=4 )
 8000c86:	89fb      	ldrh	r3, [r7, #14]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	81fb      	strh	r3, [r7, #14]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	89fa      	ldrh	r2, [r7, #14]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3d8      	bcc.n	8000c48 <afficherEntete+0x4c>
	}
	printf("+-------+---------+--------+\r\n");
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <afficherEntete+0xb4>)
 8000c98:	f002 f9a0 	bl	8002fdc <puts>

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	0800424c 	.word	0x0800424c
 8000ca8:	08004264 	.word	0x08004264
 8000cac:	0800427c 	.word	0x0800427c
 8000cb0:	0800429c 	.word	0x0800429c
 8000cb4:	080042bc 	.word	0x080042bc
 8000cb8:	080042dc 	.word	0x080042dc

08000cbc <occurence>:
  /*==============================================================================
**                           Public Functions                                   **
================================================================================*/

uint16_t occurence( uint8_t *chaine, uint8_t tab[MAX_ARRAY] )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	uint16_t nbrCaractere=0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	81fb      	strh	r3, [r7, #14]
//
	while(chaine[nbrCaractere]!='\0')
 8000cca:	e014      	b.n	8000cf6 <occurence+0x3a>
	{
		tab[chaine[nbrCaractere]] += 1;
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	440b      	add	r3, r1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	440b      	add	r3, r1
 8000cea:	3201      	adds	r2, #1
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	701a      	strb	r2, [r3, #0]
		nbrCaractere++;
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	81fb      	strh	r3, [r7, #14]
	while(chaine[nbrCaractere]!='\0')
 8000cf6:	89fb      	ldrh	r3, [r7, #14]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1e4      	bne.n	8000ccc <occurence+0x10>
	}

	printf("Le texte en entree est: \r\n %s\r\n\r\n", chaine);
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <occurence+0x68>)
 8000d06:	f002 f8e3 	bl	8002ed0 <iprintf>
	printf( "--> On calcul la frequence d'apparition: Occurrences() \r\n" );
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <occurence+0x6c>)
 8000d0c:	f002 f966 	bl	8002fdc <puts>
	printf("Nombre de caracteres     Total  = %10d\r\n", nbrCaractere);
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <occurence+0x70>)
 8000d16:	f002 f8db 	bl	8002ed0 <iprintf>

	return nbrCaractere;
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	080042f4 	.word	0x080042f4
 8000d28:	08004318 	.word	0x08004318
 8000d2c:	08004354 	.word	0x08004354

08000d30 <compterNombreCaracteresDifferents>:

uint8_t compterNombreCaracteresDifferents( uint8_t tab[MAX_ARRAY] )
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    uint8_t i=0,nbrCaractereDifferents=0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73bb      	strb	r3, [r7, #14]

    for( i=0; i<MAX_ARRAY_MOINS1; i++ )
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e00b      	b.n	8000d5e <compterNombreCaracteresDifferents+0x2e>
    {
        if( tab[i]!=0 ) { nbrCaractereDifferents++; } // printf("%d\r\n", tab[i]);
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <compterNombreCaracteresDifferents+0x28>
 8000d52:	7bbb      	ldrb	r3, [r7, #14]
 8000d54:	3301      	adds	r3, #1
 8000d56:	73bb      	strb	r3, [r7, #14]
    for( i=0; i<MAX_ARRAY_MOINS1; i++ )
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	2bff      	cmp	r3, #255	; 0xff
 8000d62:	d1f0      	bne.n	8000d46 <compterNombreCaracteresDifferents+0x16>
    }

    printf("Nombre de caracteres differents = %10d\r\n\r\n", nbrCaractereDifferents);
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	4619      	mov	r1, r3
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <compterNombreCaracteresDifferents+0x48>)
 8000d6a:	f002 f8b1 	bl	8002ed0 <iprintf>

    return nbrCaractereDifferents;
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	08004380 	.word	0x08004380

08000d7c <afficherTabCaractere>:

void afficherTabCaractere( uint8_t tab[MAX_ARRAY] )
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	int i=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
//Affichage caractere et occurences.
//Pour chaque fonction une fonction d'affichage distincte

	printf( "Occurrences des caracteres:\r\n" );
 8000d88:	4815      	ldr	r0, [pc, #84]	; (8000de0 <afficherTabCaractere+0x64>)
 8000d8a:	f002 f927 	bl	8002fdc <puts>
    printf("|-------------------------|\r\n");
 8000d8e:	4815      	ldr	r0, [pc, #84]	; (8000de4 <afficherTabCaractere+0x68>)
 8000d90:	f002 f924 	bl	8002fdc <puts>
    printf("| Caractere  |  Occurrence|\r\n");
 8000d94:	4814      	ldr	r0, [pc, #80]	; (8000de8 <afficherTabCaractere+0x6c>)
 8000d96:	f002 f921 	bl	8002fdc <puts>
    printf("|------------|------------|\r\n");
 8000d9a:	4814      	ldr	r0, [pc, #80]	; (8000dec <afficherTabCaractere+0x70>)
 8000d9c:	f002 f91e 	bl	8002fdc <puts>
    for( i=0; i<MAX_ARRAY; i++ )
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e011      	b.n	8000dca <afficherTabCaractere+0x4e>
    {
        if( tab[i]!=0 ) { printf( "| %10c | %10d |\r\n", i, tab[i] ); }
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d008      	beq.n	8000dc4 <afficherTabCaractere+0x48>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68f9      	ldr	r1, [r7, #12]
 8000dbe:	480c      	ldr	r0, [pc, #48]	; (8000df0 <afficherTabCaractere+0x74>)
 8000dc0:	f002 f886 	bl	8002ed0 <iprintf>
    for( i=0; i<MAX_ARRAY; i++ )
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2bff      	cmp	r3, #255	; 0xff
 8000dce:	ddea      	ble.n	8000da6 <afficherTabCaractere+0x2a>
    }
    printf("|-------------------------|\r\n\r\n");
 8000dd0:	4808      	ldr	r0, [pc, #32]	; (8000df4 <afficherTabCaractere+0x78>)
 8000dd2:	f002 f903 	bl	8002fdc <puts>
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	080043ac 	.word	0x080043ac
 8000de4:	080043cc 	.word	0x080043cc
 8000de8:	080043ec 	.word	0x080043ec
 8000dec:	0800440c 	.word	0x0800440c
 8000df0:	0800442c 	.word	0x0800442c
 8000df4:	08004440 	.word	0x08004440

08000df8 <parcourirArbre>:
**                           Public Functions                                   **
================================================================================*/


void parcourirArbre(noeud *ptrNoeud)
{
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af04      	add	r7, sp, #16
 8000dfe:	6078      	str	r0, [r7, #4]
    if( ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL )
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d11f      	bne.n	8000e48 <parcourirArbre+0x50>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d11b      	bne.n	8000e48 <parcourirArbre+0x50>
    {
        printf("| %c         | %10d | %10lu | %10d |  %10p  |  %10p  |  %10p  |\r\n", ptrNoeud->c, ptrNoeud->occurence, ptrNoeud->code, ptrNoeud->tailleCode, ptrNoeud, ptrNoeud->gauche, ptrNoeud->droite);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	885b      	ldrh	r3, [r3, #2]
 8000e1a:	461c      	mov	r4, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	889b      	ldrh	r3, [r3, #4]
 8000e20:	461d      	mov	r5, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	785b      	ldrb	r3, [r3, #1]
 8000e26:	4619      	mov	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	68d2      	ldr	r2, [r2, #12]
 8000e30:	9203      	str	r2, [sp, #12]
 8000e32:	9302      	str	r3, [sp, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9100      	str	r1, [sp, #0]
 8000e3a:	462b      	mov	r3, r5
 8000e3c:	4622      	mov	r2, r4
 8000e3e:	4601      	mov	r1, r0
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <parcourirArbre+0x70>)
 8000e42:	f002 f845 	bl	8002ed0 <iprintf>
 8000e46:	e00a      	b.n	8000e5e <parcourirArbre+0x66>

    }
    else
    {

    	parcourirArbre(ptrNoeud->droite);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffd3 	bl	8000df8 <parcourirArbre>
    	parcourirArbre(ptrNoeud->gauche);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ffce 	bl	8000df8 <parcourirArbre>
    }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bdb0      	pop	{r4, r5, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08004460 	.word	0x08004460

08000e6c <afficherFeuilles>:

void afficherFeuilles(noeud *ptrNoeud)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    printf("|-----------------------------------------------------------------------------------------------|\r\n");
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <afficherFeuilles+0x28>)
 8000e76:	f002 f8b1 	bl	8002fdc <puts>
    printf("| Caractere |  Occurence |    Code    |   Taille   |    Adresse   |    Gauche    |    Droite    |\r\n");
 8000e7a:	4807      	ldr	r0, [pc, #28]	; (8000e98 <afficherFeuilles+0x2c>)
 8000e7c:	f002 f8ae 	bl	8002fdc <puts>
    printf("|-----------|------------|------------|------------|--------------|-----------------------------|\r\n");
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <afficherFeuilles+0x30>)
 8000e82:	f002 f8ab 	bl	8002fdc <puts>
    parcourirArbre(ptrNoeud);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffb6 	bl	8000df8 <parcourirArbre>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	080044a4 	.word	0x080044a4
 8000e98:	08004508 	.word	0x08004508
 8000e9c:	0800456c 	.word	0x0800456c

08000ea0 <creerCode>:

void creerCode(noeud *ptrNoeud, uint32_t code, uint32_t taille)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
    if(ptrNoeud->gauche == NULL && ptrNoeud->droite == NULL)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10c      	bne.n	8000ece <creerCode+0x2e>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d108      	bne.n	8000ece <creerCode+0x2e>
    {
    	ptrNoeud->tailleCode = taille;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	705a      	strb	r2, [r3, #1]
    	ptrNoeud->code       = code;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	809a      	strh	r2, [r3, #4]
 8000ecc:	e013      	b.n	8000ef6 <creerCode+0x56>
    }
    else
    {
    	creerCode( ptrNoeud->droite, (code<<1)+1, taille+1 ); //recursif
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68d8      	ldr	r0, [r3, #12]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	1c59      	adds	r1, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3301      	adds	r3, #1
 8000edc:	461a      	mov	r2, r3
 8000ede:	f7ff ffdf 	bl	8000ea0 <creerCode>
    	creerCode( ptrNoeud->gauche, (code<<1), taille+1 );
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6898      	ldr	r0, [r3, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	0059      	lsls	r1, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3301      	adds	r3, #1
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f7ff ffd6 	bl	8000ea0 <creerCode>
    }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <triArbreHuffman>:
 /*==============================================================================
**                           Public Functions                                   **
================================================================================*/

void triArbreHuffman( noeud *arbre[MAX_ARRAY], uint32_t taille )
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    int i=0,j=0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]

    printf( "--> Tri ArbreHuffman par ordre croissant: TriArbreHuffman() \r\n" );
 8000f12:	4829      	ldr	r0, [pc, #164]	; (8000fb8 <triArbreHuffman+0xb8>)
 8000f14:	f002 f862 	bl	8002fdc <puts>

    for (i = 0; i<(taille); i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	e043      	b.n	8000fa6 <triArbreHuffman+0xa6>
    {
        for (j=0; j<(taille-i); j++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	e037      	b.n	8000f94 <triArbreHuffman+0x94>
        {
        	if ( arbre[j]->occurence > arbre[j+1]->occurence )
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	885a      	ldrh	r2, [r3, #2]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	3301      	adds	r3, #1
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	440b      	add	r3, r1
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d925      	bls.n	8000f8e <triArbreHuffman+0x8e>
            {
                noeud tmpon = *arbre[j];
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f107 0408 	add.w	r4, r7, #8
 8000f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                 *arbre[j] = *arbre[j+1];
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	461c      	mov	r4, r3
 8000f6e:	460b      	mov	r3, r1
 8000f70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                *arbre[j+1] = tmpon;
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	461c      	mov	r4, r3
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (j=0; j<(taille-i); j++)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	1ad2      	subs	r2, r2, r3
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8c1      	bhi.n	8000f24 <triArbreHuffman+0x24>
    for (i = 0; i<(taille); i++)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d8b7      	bhi.n	8000f1e <triArbreHuffman+0x1e>
            }
        }
    }

}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	3724      	adds	r7, #36	; 0x24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	080045d0 	.word	0x080045d0

08000fbc <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);


int __io_putchar(int ch){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 1000); //Printf sur UART2
 8000fc4:	1d39      	adds	r1, r7, #4
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <__io_putchar+0x20>)
 8000fce:	f001 fbd2 	bl	8002776 <HAL_UART_Transmit>
}
 8000fd2:	bf00      	nop
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000e44 	.word	0x20000e44

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af02      	add	r7, sp, #8
  HAL_Init();
 8000fe6:	f000 fb09 	bl	80015fc <HAL_Init>
  SystemClock_Config();
 8000fea:	f000 f87f 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f000 f915 	bl	800121c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff2:	f000 f8e9 	bl	80011c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	printf("--------- Projet Huffman F446RE ---------\r\n\r\n");
 8000ff6:	4832      	ldr	r0, [pc, #200]	; (80010c0 <main+0xe0>)
 8000ff8:	f001 fff0 	bl	8002fdc <puts>
	printf("\r\nSTART\r\n\r\n");
 8000ffc:	4831      	ldr	r0, [pc, #196]	; (80010c4 <main+0xe4>)
 8000ffe:	f001 ffed 	bl	8002fdc <puts>
//______ Calcul occurrences ______
	nbrCaractereTotal= occurence(texte, tabCaractere);
 8001002:	4931      	ldr	r1, [pc, #196]	; (80010c8 <main+0xe8>)
 8001004:	4831      	ldr	r0, [pc, #196]	; (80010cc <main+0xec>)
 8001006:	f7ff fe59 	bl	8000cbc <occurence>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <main+0xf0>)
 8001010:	801a      	strh	r2, [r3, #0]
	nbrCaractereDifferent= compterNombreCaracteresDifferents(tabCaractere);
 8001012:	482d      	ldr	r0, [pc, #180]	; (80010c8 <main+0xe8>)
 8001014:	f7ff fe8c 	bl	8000d30 <compterNombreCaracteresDifferents>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <main+0xf4>)
 800101e:	701a      	strb	r2, [r3, #0]
	afficherTabCaractere(tabCaractere);
 8001020:	4829      	ldr	r0, [pc, #164]	; (80010c8 <main+0xe8>)
 8001022:	f7ff feab 	bl	8000d7c <afficherTabCaractere>
//______ Creation feuilles ______
	creerFeuille(arbreHuffman,tabCaractere);
 8001026:	4928      	ldr	r1, [pc, #160]	; (80010c8 <main+0xe8>)
 8001028:	482b      	ldr	r0, [pc, #172]	; (80010d8 <main+0xf8>)
 800102a:	f7ff fb5d 	bl	80006e8 <creerFeuille>
	afficherTableauArbreHuffman(arbreHuffman);
 800102e:	482a      	ldr	r0, [pc, #168]	; (80010d8 <main+0xf8>)
 8001030:	f7ff fbb8 	bl	80007a4 <afficherTableauArbreHuffman>
//___Tri de l'arbre ______
	triArbreHuffman(arbreHuffman, nbrCaractereDifferent-1);
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <main+0xf4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	4619      	mov	r1, r3
 800103c:	4826      	ldr	r0, [pc, #152]	; (80010d8 <main+0xf8>)
 800103e:	f7ff ff5f 	bl	8000f00 <triArbreHuffman>
	afficherArbreHuffman(arbreHuffman);
 8001042:	4825      	ldr	r0, [pc, #148]	; (80010d8 <main+0xf8>)
 8001044:	f7ff fbf8 	bl	8000838 <afficherArbreHuffman>
//______ Construction de l'arbre binaire ______
	constructionArbreBinaire(arbreHuffman, nbrCaractereDifferent-1);
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <main+0xf4>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3b01      	subs	r3, #1
 800104e:	4619      	mov	r1, r3
 8001050:	4821      	ldr	r0, [pc, #132]	; (80010d8 <main+0xf8>)
 8001052:	f7ff faf1 	bl	8000638 <constructionArbreBinaire>
	afficherRacineArbre(arbreHuffman[0]); //AFFICHE RACINE
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <main+0xf8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb14 	bl	8000688 <afficherRacineArbre>
	racine = arbreHuffman[0];
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <main+0xf8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <main+0xfc>)
 8001066:	6013      	str	r3, [r2, #0]
	afficherFeuilles (racine);
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <main+0xfc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fefd 	bl	8000e6c <afficherFeuilles>
//______ Creation d'un code Huffman pour chaque carac ______
	creerCode(racine, 0, 0);
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <main+0xfc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff10 	bl	8000ea0 <creerCode>
//______ Compression du texte ______
	int16_t tailleC = compresssionTexte( texte, racine, texteCompress);
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <main+0xfc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <main+0x100>)
 8001086:	4619      	mov	r1, r3
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <main+0xec>)
 800108a:	f7ff fc7b 	bl	8000984 <compresssionTexte>
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
//______ Creation entete ______
	creationEntete(entete, tailleC, nbrCaractereTotal, tabCaractere, racine);
 8001092:	88f9      	ldrh	r1, [r7, #6]
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <main+0xf0>)
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <main+0xfc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <main+0xe8>)
 80010a0:	4810      	ldr	r0, [pc, #64]	; (80010e4 <main+0x104>)
 80010a2:	f7ff fd3b 	bl	8000b1c <creationEntete>
	afficherEntete(entete);
 80010a6:	480f      	ldr	r0, [pc, #60]	; (80010e4 <main+0x104>)
 80010a8:	f7ff fda8 	bl	8000bfc <afficherEntete>
	afficherTexteCompresse(texteCompress, tailleC);
 80010ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b0:	4619      	mov	r1, r3
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <main+0x100>)
 80010b4:	f7ff fce2 	bl	8000a7c <afficherTexteCompresse>



	printf("\r\nEND\r\n");
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <main+0x108>)
 80010ba:	f001 ff8f 	bl	8002fdc <puts>

  while (1)
 80010be:	e7fe      	b.n	80010be <main+0xde>
 80010c0:	08004610 	.word	0x08004610
 80010c4:	08004640 	.word	0x08004640
 80010c8:	20000098 	.word	0x20000098
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000198 	.word	0x20000198
 80010d4:	2000019a 	.word	0x2000019a
 80010d8:	20000a40 	.word	0x20000a40
 80010dc:	20000e40 	.word	0x20000e40
 80010e0:	20000264 	.word	0x20000264
 80010e4:	2000019c 	.word	0x2000019c
 80010e8:	0800464c 	.word	0x0800464c

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2234      	movs	r2, #52	; 0x34
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fe36 	bl	8002d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <SystemClock_Config+0xd4>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <SystemClock_Config+0xd4>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <SystemClock_Config+0xd4>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <SystemClock_Config+0xd8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001138:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <SystemClock_Config+0xd8>)
 800113a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <SystemClock_Config+0xd8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	2301      	movs	r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001154:	2310      	movs	r3, #16
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115c:	2300      	movs	r3, #0
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001160:	2310      	movs	r3, #16
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001164:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001168:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800116a:	2304      	movs	r3, #4
 800116c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001172:	2302      	movs	r3, #2
 8001174:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4618      	mov	r0, r3
 800117c:	f001 f810 	bl	80021a0 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001186:	f000 f8b7 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2302      	movs	r3, #2
 8001190:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	2102      	movs	r1, #2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fd2e 	bl	8001c08 <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011b2:	f000 f8a1 	bl	80012f8 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3750      	adds	r7, #80	; 0x50
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART2_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 8001200:	f001 fa6c 	bl	80026dc <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f875 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000e44 	.word	0x20000e44
 8001218:	40004400 	.word	0x40004400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a2c      	ldr	r2, [pc, #176]	; (80012ec <MX_GPIO_Init+0xd0>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a25      	ldr	r2, [pc, #148]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_GPIO_Init+0xd0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2120      	movs	r1, #32
 80012a6:	4812      	ldr	r0, [pc, #72]	; (80012f0 <MX_GPIO_Init+0xd4>)
 80012a8:	f000 fc94 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_GPIO_Init+0xd8>)
 80012c4:	f000 faf2 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012c8:	2320      	movs	r3, #32
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_GPIO_Init+0xd4>)
 80012e0:	f000 fae4 	bl	80018ac <HAL_GPIO_Init>

}
 80012e4:	bf00      	nop
 80012e6:	3728      	adds	r7, #40	; 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020800 	.word	0x40020800

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_MspInit+0x4c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001346:	2007      	movs	r0, #7
 8001348:	f000 fa7c 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a19      	ldr	r2, [pc, #100]	; (80013dc <HAL_UART_MspInit+0x84>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d12b      	bne.n	80013d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_UART_MspInit+0x88>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_UART_MspInit+0x88>)
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_UART_MspInit+0x88>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_UART_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_UART_MspInit+0x88>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_UART_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013b2:	230c      	movs	r3, #12
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c2:	2307      	movs	r3, #7
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <HAL_UART_MspInit+0x8c>)
 80013ce:	f000 fa6d 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40004400 	.word	0x40004400
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f934 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
	}

return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fd93 	bl	8000fbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
	}
	return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_close>:

int _close(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d6:	605a      	str	r2, [r3, #4]
	return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_isatty>:

int _isatty(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f001 fbde 	bl	8002d08 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20020000 	.word	0x20020000
 8001578:	00000400 	.word	0x00000400
 800157c:	20000a34 	.word	0x20000a34
 8001580:	20000ea0 	.word	0x20000ea0

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c4:	4c0b      	ldr	r4, [pc, #44]	; (80015f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015d2:	f7ff ffd7 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f001 fb9d 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff fd01 	bl	8000fe0 <main>
  bx  lr    
 80015de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80015ec:	08004714 	.word	0x08004714
  ldr r2, =_sbss
 80015f0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80015f4:	20000e9c 	.word	0x20000e9c

080015f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <HAL_Init+0x40>)
 8001606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_Init+0x40>)
 8001612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x40>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f90d 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f808 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fe6a 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f917 	bl	8001892 <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f8ed 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000000c 	.word	0x2000000c
 8001698:	20000014 	.word	0x20000014
 800169c:	20000010 	.word	0x20000010

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000014 	.word	0x20000014
 80016c4:	20000e88 	.word	0x20000e88

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000e88 	.word	0x20000e88

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff47 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff5c 	bl	8001728 <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffb0 	bl	8001800 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e165      	b.n	8001b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8154 	bne.w	8001b8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d130      	bne.n	8001960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80ae 	beq.w	8001b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4f      	ldr	r2, [pc, #316]	; (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d025      	beq.n	8001ac6 <HAL_GPIO_Init+0x21a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4e      	ldr	r2, [pc, #312]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01f      	beq.n	8001ac2 <HAL_GPIO_Init+0x216>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4d      	ldr	r2, [pc, #308]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d019      	beq.n	8001abe <HAL_GPIO_Init+0x212>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_GPIO_Init+0x314>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x20e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4b      	ldr	r2, [pc, #300]	; (8001bc4 <HAL_GPIO_Init+0x318>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x20a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4a      	ldr	r2, [pc, #296]	; (8001bc8 <HAL_GPIO_Init+0x31c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x206>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a49      	ldr	r2, [pc, #292]	; (8001bcc <HAL_GPIO_Init+0x320>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x202>
 8001aaa:	2306      	movs	r3, #6
 8001aac:	e00c      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001aae:	2307      	movs	r3, #7
 8001ab0:	e00a      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	e008      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001aba:	2303      	movs	r3, #3
 8001abc:	e004      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e002      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	f002 0203 	and.w	r2, r2, #3
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	4093      	lsls	r3, r2
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad8:	4935      	ldr	r1, [pc, #212]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b0a:	4a31      	ldr	r2, [pc, #196]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b34:	4a26      	ldr	r2, [pc, #152]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3301      	adds	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	f67f ae96 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40021400 	.word	0x40021400
 8001bcc:	40021800 	.word	0x40021800
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0cc      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d90c      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b65      	ldr	r3, [pc, #404]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d044      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d119      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e067      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 0203 	bic.w	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4934      	ldr	r1, [pc, #208]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff fce6 	bl	80016c8 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7ff fce2 	bl	80016c8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e04f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 020c 	and.w	r2, r3, #12
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1eb      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d20c      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f855 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fc46 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	08004654 	.word	0x08004654
 8001dcc:	2000000c 	.word	0x2000000c
 8001dd0:	20000010 	.word	0x20000010

08001dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	2000000c 	.word	0x2000000c

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df0:	f7ff fff0 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0a9b      	lsrs	r3, r3, #10
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	08004664 	.word	0x08004664

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e18:	f7ff ffdc 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	0b5b      	lsrs	r3, r3, #13
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4903      	ldr	r1, [pc, #12]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	08004664 	.word	0x08004664

08001e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e40:	b088      	sub	sp, #32
 8001e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e58:	4bce      	ldr	r3, [pc, #824]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	f200 818d 	bhi.w	8002180 <HAL_RCC_GetSysClockFreq+0x344>
 8001e66:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <HAL_RCC_GetSysClockFreq+0x30>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001ea1 	.word	0x08001ea1
 8001e70:	08002181 	.word	0x08002181
 8001e74:	08002181 	.word	0x08002181
 8001e78:	08002181 	.word	0x08002181
 8001e7c:	08001ea7 	.word	0x08001ea7
 8001e80:	08002181 	.word	0x08002181
 8001e84:	08002181 	.word	0x08002181
 8001e88:	08002181 	.word	0x08002181
 8001e8c:	08001ead 	.word	0x08001ead
 8001e90:	08002181 	.word	0x08002181
 8001e94:	08002181 	.word	0x08002181
 8001e98:	08002181 	.word	0x08002181
 8001e9c:	08002021 	.word	0x08002021
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4bbd      	ldr	r3, [pc, #756]	; (8002198 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ea2:	61bb      	str	r3, [r7, #24]
       break;
 8001ea4:	e16f      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ea6:	4bbd      	ldr	r3, [pc, #756]	; (800219c <HAL_RCC_GetSysClockFreq+0x360>)
 8001ea8:	61bb      	str	r3, [r7, #24]
      break;
 8001eaa:	e16c      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eac:	4bb9      	ldr	r3, [pc, #740]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eb4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb6:	4bb7      	ldr	r3, [pc, #732]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d053      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ec2:	4bb4      	ldr	r3, [pc, #720]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	099b      	lsrs	r3, r3, #6
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	ea02 0400 	and.w	r4, r2, r0
 8001eda:	603c      	str	r4, [r7, #0]
 8001edc:	400b      	ands	r3, r1
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	014b      	lsls	r3, r1, #5
 8001ef2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ef6:	0142      	lsls	r2, r0, #5
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	4623      	mov	r3, r4
 8001efe:	1ac0      	subs	r0, r0, r3
 8001f00:	462b      	mov	r3, r5
 8001f02:	eb61 0103 	sbc.w	r1, r1, r3
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	018b      	lsls	r3, r1, #6
 8001f10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f14:	0182      	lsls	r2, r0, #6
 8001f16:	1a12      	subs	r2, r2, r0
 8001f18:	eb63 0301 	sbc.w	r3, r3, r1
 8001f1c:	f04f 0000 	mov.w	r0, #0
 8001f20:	f04f 0100 	mov.w	r1, #0
 8001f24:	00d9      	lsls	r1, r3, #3
 8001f26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f2a:	00d0      	lsls	r0, r2, #3
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4621      	mov	r1, r4
 8001f32:	1852      	adds	r2, r2, r1
 8001f34:	4629      	mov	r1, r5
 8001f36:	eb43 0101 	adc.w	r1, r3, r1
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	f04f 0000 	mov.w	r0, #0
 8001f40:	f04f 0100 	mov.w	r1, #0
 8001f44:	0259      	lsls	r1, r3, #9
 8001f46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f4a:	0250      	lsls	r0, r2, #9
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	461a      	mov	r2, r3
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	f7fe f9a8 	bl	80002b0 <__aeabi_uldivmod>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4613      	mov	r3, r2
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	e04c      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6a:	4b8a      	ldr	r3, [pc, #552]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	461a      	mov	r2, r3
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f7a:	f04f 0100 	mov.w	r1, #0
 8001f7e:	ea02 0a00 	and.w	sl, r2, r0
 8001f82:	ea03 0b01 	and.w	fp, r3, r1
 8001f86:	4650      	mov	r0, sl
 8001f88:	4659      	mov	r1, fp
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	014b      	lsls	r3, r1, #5
 8001f94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f98:	0142      	lsls	r2, r0, #5
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	ebb0 000a 	subs.w	r0, r0, sl
 8001fa2:	eb61 010b 	sbc.w	r1, r1, fp
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	018b      	lsls	r3, r1, #6
 8001fb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fb4:	0182      	lsls	r2, r0, #6
 8001fb6:	1a12      	subs	r2, r2, r0
 8001fb8:	eb63 0301 	sbc.w	r3, r3, r1
 8001fbc:	f04f 0000 	mov.w	r0, #0
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	00d9      	lsls	r1, r3, #3
 8001fc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fca:	00d0      	lsls	r0, r2, #3
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	eb12 020a 	adds.w	r2, r2, sl
 8001fd4:	eb43 030b 	adc.w	r3, r3, fp
 8001fd8:	f04f 0000 	mov.w	r0, #0
 8001fdc:	f04f 0100 	mov.w	r1, #0
 8001fe0:	0299      	lsls	r1, r3, #10
 8001fe2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001fe6:	0290      	lsls	r0, r2, #10
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	f7fe f95a 	bl	80002b0 <__aeabi_uldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4613      	mov	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002004:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	3301      	adds	r3, #1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	61bb      	str	r3, [r7, #24]
      break;
 800201e:	e0b2      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002020:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002028:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800202a:	4b5a      	ldr	r3, [pc, #360]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d04d      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	099b      	lsrs	r3, r3, #6
 800203c:	461a      	mov	r2, r3
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	ea02 0800 	and.w	r8, r2, r0
 800204e:	ea03 0901 	and.w	r9, r3, r1
 8002052:	4640      	mov	r0, r8
 8002054:	4649      	mov	r1, r9
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	014b      	lsls	r3, r1, #5
 8002060:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002064:	0142      	lsls	r2, r0, #5
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	ebb0 0008 	subs.w	r0, r0, r8
 800206e:	eb61 0109 	sbc.w	r1, r1, r9
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	018b      	lsls	r3, r1, #6
 800207c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002080:	0182      	lsls	r2, r0, #6
 8002082:	1a12      	subs	r2, r2, r0
 8002084:	eb63 0301 	sbc.w	r3, r3, r1
 8002088:	f04f 0000 	mov.w	r0, #0
 800208c:	f04f 0100 	mov.w	r1, #0
 8002090:	00d9      	lsls	r1, r3, #3
 8002092:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002096:	00d0      	lsls	r0, r2, #3
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	eb12 0208 	adds.w	r2, r2, r8
 80020a0:	eb43 0309 	adc.w	r3, r3, r9
 80020a4:	f04f 0000 	mov.w	r0, #0
 80020a8:	f04f 0100 	mov.w	r1, #0
 80020ac:	0259      	lsls	r1, r3, #9
 80020ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80020b2:	0250      	lsls	r0, r2, #9
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	461a      	mov	r2, r3
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	f7fe f8f4 	bl	80002b0 <__aeabi_uldivmod>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4613      	mov	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	e04a      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	461a      	mov	r2, r3
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	ea02 0400 	and.w	r4, r2, r0
 80020ea:	ea03 0501 	and.w	r5, r3, r1
 80020ee:	4620      	mov	r0, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	014b      	lsls	r3, r1, #5
 80020fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002100:	0142      	lsls	r2, r0, #5
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	1b00      	subs	r0, r0, r4
 8002108:	eb61 0105 	sbc.w	r1, r1, r5
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	018b      	lsls	r3, r1, #6
 8002116:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800211a:	0182      	lsls	r2, r0, #6
 800211c:	1a12      	subs	r2, r2, r0
 800211e:	eb63 0301 	sbc.w	r3, r3, r1
 8002122:	f04f 0000 	mov.w	r0, #0
 8002126:	f04f 0100 	mov.w	r1, #0
 800212a:	00d9      	lsls	r1, r3, #3
 800212c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002130:	00d0      	lsls	r0, r2, #3
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	1912      	adds	r2, r2, r4
 8002138:	eb45 0303 	adc.w	r3, r5, r3
 800213c:	f04f 0000 	mov.w	r0, #0
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	0299      	lsls	r1, r3, #10
 8002146:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800214a:	0290      	lsls	r0, r2, #10
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	461a      	mov	r2, r3
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	f7fe f8a8 	bl	80002b0 <__aeabi_uldivmod>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4613      	mov	r3, r2
 8002166:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_RCC_GetSysClockFreq+0x358>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	0f1b      	lsrs	r3, r3, #28
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	61bb      	str	r3, [r7, #24]
      break;
 800217e:	e002      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002182:	61bb      	str	r3, [r7, #24]
      break;
 8002184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002186:	69bb      	ldr	r3, [r7, #24]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	00f42400 	.word	0x00f42400
 800219c:	007a1200 	.word	0x007a1200

080021a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e28d      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8083 	beq.w	80022c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021c0:	4b94      	ldr	r3, [pc, #592]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d019      	beq.n	8002200 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021cc:	4b91      	ldr	r3, [pc, #580]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021d8:	4b8e      	ldr	r3, [pc, #568]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e4:	d00c      	beq.n	8002200 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e6:	4b8b      	ldr	r3, [pc, #556]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d112      	bne.n	8002218 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b84      	ldr	r3, [pc, #528]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x124>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e25a      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x90>
 8002222:	4b7c      	ldr	r3, [pc, #496]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7b      	ldr	r2, [pc, #492]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xcc>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0xb4>
 800223a:	4b76      	ldr	r3, [pc, #472]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a75      	ldr	r2, [pc, #468]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b73      	ldr	r3, [pc, #460]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a72      	ldr	r2, [pc, #456]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xcc>
 8002254:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6e      	ldr	r2, [pc, #440]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6b      	ldr	r2, [pc, #428]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff fa28 	bl	80016c8 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fa24 	bl	80016c8 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e21f      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b61      	ldr	r3, [pc, #388]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xdc>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff fa14 	bl	80016c8 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff fa10 	bl	80016c8 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e20b      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	4b57      	ldr	r3, [pc, #348]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x104>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d06f      	beq.n	80023b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022d2:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d017      	beq.n	800230e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022de:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022ea:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d11c      	bne.n	800233c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002302:	4b44      	ldr	r3, [pc, #272]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d116      	bne.n	800233c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_RCC_OscConfig+0x186>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e1d3      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4937      	ldr	r1, [pc, #220]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	e03a      	b.n	80023b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002344:	4b34      	ldr	r3, [pc, #208]	; (8002418 <HAL_RCC_OscConfig+0x278>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7ff f9bd 	bl	80016c8 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002352:	f7ff f9b9 	bl	80016c8 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1b4      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4925      	ldr	r1, [pc, #148]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
 8002384:	e015      	b.n	80023b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_OscConfig+0x278>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff f99c 	bl	80016c8 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002394:	f7ff f998 	bl	80016c8 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e193      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d036      	beq.n	800242c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_RCC_OscConfig+0x27c>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7ff f97c 	bl	80016c8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d4:	f7ff f978 	bl	80016c8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e173      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80023e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x234>
 80023f2:	e01b      	b.n	800242c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_OscConfig+0x27c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7ff f965 	bl	80016c8 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	e00e      	b.n	8002420 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002402:	f7ff f961 	bl	80016c8 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d907      	bls.n	8002420 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e15c      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
 8002414:	40023800 	.word	0x40023800
 8002418:	42470000 	.word	0x42470000
 800241c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	4b8a      	ldr	r3, [pc, #552]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ea      	bne.n	8002402 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8097 	beq.w	8002568 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243e:	4b83      	ldr	r3, [pc, #524]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10f      	bne.n	800246a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a7e      	ldr	r2, [pc, #504]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b7c      	ldr	r3, [pc, #496]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b79      	ldr	r3, [pc, #484]	; (8002650 <HAL_RCC_OscConfig+0x4b0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x4b0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a75      	ldr	r2, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x4b0>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7ff f921 	bl	80016c8 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7ff f91d 	bl	80016c8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e118      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	4b6c      	ldr	r3, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x4b0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x31e>
 80024b0:	4b66      	ldr	r3, [pc, #408]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6713      	str	r3, [r2, #112]	; 0x70
 80024bc:	e01c      	b.n	80024f8 <HAL_RCC_OscConfig+0x358>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x340>
 80024c6:	4b61      	ldr	r3, [pc, #388]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a60      	ldr	r2, [pc, #384]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70
 80024d2:	4b5e      	ldr	r3, [pc, #376]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a5d      	ldr	r2, [pc, #372]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0x358>
 80024e0:	4b5a      	ldr	r3, [pc, #360]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	4a59      	ldr	r2, [pc, #356]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6713      	str	r3, [r2, #112]	; 0x70
 80024ec:	4b57      	ldr	r3, [pc, #348]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	4a56      	ldr	r2, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024f2:	f023 0304 	bic.w	r3, r3, #4
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d015      	beq.n	800252c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7ff f8e2 	bl	80016c8 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	e00a      	b.n	800251e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7ff f8de 	bl	80016c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0d7      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	4b4b      	ldr	r3, [pc, #300]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0ee      	beq.n	8002508 <HAL_RCC_OscConfig+0x368>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7ff f8cc 	bl	80016c8 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7ff f8c8 	bl	80016c8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e0c1      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254a:	4b40      	ldr	r3, [pc, #256]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ee      	bne.n	8002534 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	4a3a      	ldr	r2, [pc, #232]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80ad 	beq.w	80026cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002572:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b08      	cmp	r3, #8
 800257c:	d060      	beq.n	8002640 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d145      	bne.n	8002612 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_RCC_OscConfig+0x4b4>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff f89c 	bl	80016c8 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff f898 	bl	80016c8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e093      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	3b01      	subs	r3, #1
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	071b      	lsls	r3, r3, #28
 80025de:	491b      	ldr	r1, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x4b4>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7ff f86d 	bl	80016c8 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f2:	f7ff f869 	bl	80016c8 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e064      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x452>
 8002610:	e05c      	b.n	80026cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCC_OscConfig+0x4b4>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff f856 	bl	80016c8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff f852 	bl	80016c8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e04d      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x480>
 800263e:	e045      	b.n	80026cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e040      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000
 8002654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <HAL_RCC_OscConfig+0x538>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d030      	beq.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d129      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d122      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002688:	4013      	ands	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002690:	4293      	cmp	r3, r2
 8002692:	d119      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10f      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e03f      	b.n	800276e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fe28 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2224      	movs	r2, #36	; 0x24
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800271e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f929 	bl	8002978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b08a      	sub	sp, #40	; 0x28
 800277a:	af02      	add	r7, sp, #8
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	4613      	mov	r3, r2
 8002784:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b20      	cmp	r3, #32
 8002794:	d17c      	bne.n	8002890 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_UART_Transmit+0x2c>
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e075      	b.n	8002892 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Transmit+0x3e>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e06e      	b.n	8002892 <HAL_UART_Transmit+0x11c>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2221      	movs	r2, #33	; 0x21
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ca:	f7fe ff7d 	bl	80016c8 <HAL_GetTick>
 80027ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e4:	d108      	bne.n	80027f8 <HAL_UART_Transmit+0x82>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d104      	bne.n	80027f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e003      	b.n	8002800 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002808:	e02a      	b.n	8002860 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f840 	bl	800289a <UART_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e036      	b.n	8002892 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10b      	bne.n	8002842 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002838:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	3302      	adds	r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e007      	b.n	8002852 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	3301      	adds	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1cf      	bne.n	800280a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f810 	bl	800289a <UART_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e006      	b.n	8002892 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	e000      	b.n	8002892 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002890:	2302      	movs	r3, #2
  }
}
 8002892:	4618      	mov	r0, r3
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b090      	sub	sp, #64	; 0x40
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028aa:	e050      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d04c      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <UART_WaitOnFlagUntilTimeout+0x30>
 80028ba:	f7fe ff05 	bl	80016c8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d241      	bcs.n	800294e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ea:	637a      	str	r2, [r7, #52]	; 0x34
 80028ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f2:	e841 2300 	strex	r3, r2, [r1]
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e5      	bne.n	80028ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	613b      	str	r3, [r7, #16]
   return(result);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3314      	adds	r3, #20
 800291c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800291e:	623a      	str	r2, [r7, #32]
 8002920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	69f9      	ldr	r1, [r7, #28]
 8002924:	6a3a      	ldr	r2, [r7, #32]
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	61bb      	str	r3, [r7, #24]
   return(result);
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e5      	bne.n	80028fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e00f      	b.n	800296e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4013      	ands	r3, r2
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	429a      	cmp	r2, r3
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	429a      	cmp	r2, r3
 800296a:	d09f      	beq.n	80028ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3740      	adds	r7, #64	; 0x40
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297c:	b09f      	sub	sp, #124	; 0x7c
 800297e:	af00      	add	r7, sp, #0
 8002980:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800298c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298e:	68d9      	ldr	r1, [r3, #12]
 8002990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	ea40 0301 	orr.w	r3, r0, r1
 8002998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800299a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80029b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029bc:	f021 010c 	bic.w	r1, r1, #12
 80029c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c6:	430b      	orrs	r3, r1
 80029c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	6999      	ldr	r1, [r3, #24]
 80029d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	ea40 0301 	orr.w	r3, r0, r1
 80029e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4bc5      	ldr	r3, [pc, #788]	; (8002cfc <UART_SetConfig+0x384>)
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d004      	beq.n	80029f6 <UART_SetConfig+0x7e>
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4bc3      	ldr	r3, [pc, #780]	; (8002d00 <UART_SetConfig+0x388>)
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d103      	bne.n	80029fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029f6:	f7ff fa0d 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 80029fa:	6778      	str	r0, [r7, #116]	; 0x74
 80029fc:	e002      	b.n	8002a04 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029fe:	f7ff f9f5 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 8002a02:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	f040 80b6 	bne.w	8002b7c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a12:	461c      	mov	r4, r3
 8002a14:	f04f 0500 	mov.w	r5, #0
 8002a18:	4622      	mov	r2, r4
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	1891      	adds	r1, r2, r2
 8002a1e:	6439      	str	r1, [r7, #64]	; 0x40
 8002a20:	415b      	adcs	r3, r3
 8002a22:	647b      	str	r3, [r7, #68]	; 0x44
 8002a24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a28:	1912      	adds	r2, r2, r4
 8002a2a:	eb45 0303 	adc.w	r3, r5, r3
 8002a2e:	f04f 0000 	mov.w	r0, #0
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	00d9      	lsls	r1, r3, #3
 8002a38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a3c:	00d0      	lsls	r0, r2, #3
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	1911      	adds	r1, r2, r4
 8002a44:	6639      	str	r1, [r7, #96]	; 0x60
 8002a46:	416b      	adcs	r3, r5
 8002a48:	667b      	str	r3, [r7, #100]	; 0x64
 8002a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	1891      	adds	r1, r2, r2
 8002a56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a58:	415b      	adcs	r3, r3
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a64:	f7fd fc24 	bl	80002b0 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4ba5      	ldr	r3, [pc, #660]	; (8002d04 <UART_SetConfig+0x38c>)
 8002a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	011e      	lsls	r6, r3, #4
 8002a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a78:	461c      	mov	r4, r3
 8002a7a:	f04f 0500 	mov.w	r5, #0
 8002a7e:	4622      	mov	r2, r4
 8002a80:	462b      	mov	r3, r5
 8002a82:	1891      	adds	r1, r2, r2
 8002a84:	6339      	str	r1, [r7, #48]	; 0x30
 8002a86:	415b      	adcs	r3, r3
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a8e:	1912      	adds	r2, r2, r4
 8002a90:	eb45 0303 	adc.w	r3, r5, r3
 8002a94:	f04f 0000 	mov.w	r0, #0
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	00d9      	lsls	r1, r3, #3
 8002a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aa2:	00d0      	lsls	r0, r2, #3
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	1911      	adds	r1, r2, r4
 8002aaa:	65b9      	str	r1, [r7, #88]	; 0x58
 8002aac:	416b      	adcs	r3, r5
 8002aae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	1891      	adds	r1, r2, r2
 8002abc:	62b9      	str	r1, [r7, #40]	; 0x28
 8002abe:	415b      	adcs	r3, r3
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ac6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002aca:	f7fd fbf1 	bl	80002b0 <__aeabi_uldivmod>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4b8c      	ldr	r3, [pc, #560]	; (8002d04 <UART_SetConfig+0x38c>)
 8002ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	2164      	movs	r1, #100	; 0x64
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	3332      	adds	r3, #50	; 0x32
 8002ae6:	4a87      	ldr	r2, [pc, #540]	; (8002d04 <UART_SetConfig+0x38c>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002af4:	441e      	add	r6, r3
 8002af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af8:	4618      	mov	r0, r3
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	1894      	adds	r4, r2, r2
 8002b04:	623c      	str	r4, [r7, #32]
 8002b06:	415b      	adcs	r3, r3
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b0e:	1812      	adds	r2, r2, r0
 8002b10:	eb41 0303 	adc.w	r3, r1, r3
 8002b14:	f04f 0400 	mov.w	r4, #0
 8002b18:	f04f 0500 	mov.w	r5, #0
 8002b1c:	00dd      	lsls	r5, r3, #3
 8002b1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b22:	00d4      	lsls	r4, r2, #3
 8002b24:	4622      	mov	r2, r4
 8002b26:	462b      	mov	r3, r5
 8002b28:	1814      	adds	r4, r2, r0
 8002b2a:	653c      	str	r4, [r7, #80]	; 0x50
 8002b2c:	414b      	adcs	r3, r1
 8002b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	461a      	mov	r2, r3
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	1891      	adds	r1, r2, r2
 8002b3c:	61b9      	str	r1, [r7, #24]
 8002b3e:	415b      	adcs	r3, r3
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002b4a:	f7fd fbb1 	bl	80002b0 <__aeabi_uldivmod>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <UART_SetConfig+0x38c>)
 8002b54:	fba3 1302 	umull	r1, r3, r3, r2
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	2164      	movs	r1, #100	; 0x64
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	3332      	adds	r3, #50	; 0x32
 8002b66:	4a67      	ldr	r2, [pc, #412]	; (8002d04 <UART_SetConfig+0x38c>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	f003 0207 	and.w	r2, r3, #7
 8002b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4432      	add	r2, r6
 8002b78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b7a:	e0b9      	b.n	8002cf0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7e:	461c      	mov	r4, r3
 8002b80:	f04f 0500 	mov.w	r5, #0
 8002b84:	4622      	mov	r2, r4
 8002b86:	462b      	mov	r3, r5
 8002b88:	1891      	adds	r1, r2, r2
 8002b8a:	6139      	str	r1, [r7, #16]
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b94:	1912      	adds	r2, r2, r4
 8002b96:	eb45 0303 	adc.w	r3, r5, r3
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	00d9      	lsls	r1, r3, #3
 8002ba4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ba8:	00d0      	lsls	r0, r2, #3
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	eb12 0804 	adds.w	r8, r2, r4
 8002bb2:	eb43 0905 	adc.w	r9, r3, r5
 8002bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	008b      	lsls	r3, r1, #2
 8002bca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bce:	0082      	lsls	r2, r0, #2
 8002bd0:	4640      	mov	r0, r8
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	f7fd fb6c 	bl	80002b0 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <UART_SetConfig+0x38c>)
 8002bde:	fba3 2302 	umull	r2, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	011e      	lsls	r6, r3, #4
 8002be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be8:	4618      	mov	r0, r3
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	1894      	adds	r4, r2, r2
 8002bf4:	60bc      	str	r4, [r7, #8]
 8002bf6:	415b      	adcs	r3, r3
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bfe:	1812      	adds	r2, r2, r0
 8002c00:	eb41 0303 	adc.w	r3, r1, r3
 8002c04:	f04f 0400 	mov.w	r4, #0
 8002c08:	f04f 0500 	mov.w	r5, #0
 8002c0c:	00dd      	lsls	r5, r3, #3
 8002c0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c12:	00d4      	lsls	r4, r2, #3
 8002c14:	4622      	mov	r2, r4
 8002c16:	462b      	mov	r3, r5
 8002c18:	1814      	adds	r4, r2, r0
 8002c1a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002c1c:	414b      	adcs	r3, r1
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	008b      	lsls	r3, r1, #2
 8002c34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c38:	0082      	lsls	r2, r0, #2
 8002c3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002c3e:	f7fd fb37 	bl	80002b0 <__aeabi_uldivmod>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <UART_SetConfig+0x38c>)
 8002c48:	fba3 1302 	umull	r1, r3, r3, r2
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	2164      	movs	r1, #100	; 0x64
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	3332      	adds	r3, #50	; 0x32
 8002c5a:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <UART_SetConfig+0x38c>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c66:	441e      	add	r6, r3
 8002c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	1894      	adds	r4, r2, r2
 8002c76:	603c      	str	r4, [r7, #0]
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c80:	1812      	adds	r2, r2, r0
 8002c82:	eb41 0303 	adc.w	r3, r1, r3
 8002c86:	f04f 0400 	mov.w	r4, #0
 8002c8a:	f04f 0500 	mov.w	r5, #0
 8002c8e:	00dd      	lsls	r5, r3, #3
 8002c90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c94:	00d4      	lsls	r4, r2, #3
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	eb12 0a00 	adds.w	sl, r2, r0
 8002c9e:	eb43 0b01 	adc.w	fp, r3, r1
 8002ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	008b      	lsls	r3, r1, #2
 8002cb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cba:	0082      	lsls	r2, r0, #2
 8002cbc:	4650      	mov	r0, sl
 8002cbe:	4659      	mov	r1, fp
 8002cc0:	f7fd faf6 	bl	80002b0 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <UART_SetConfig+0x38c>)
 8002cca:	fba3 1302 	umull	r1, r3, r3, r2
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	2164      	movs	r1, #100	; 0x64
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	3332      	adds	r3, #50	; 0x32
 8002cdc:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <UART_SetConfig+0x38c>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4432      	add	r2, r6
 8002cee:	609a      	str	r2, [r3, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	377c      	adds	r7, #124	; 0x7c
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40011400 	.word	0x40011400
 8002d04:	51eb851f 	.word	0x51eb851f

08002d08 <__errno>:
 8002d08:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <__errno+0x8>)
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000018 	.word	0x20000018

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4d0d      	ldr	r5, [pc, #52]	; (8002d4c <__libc_init_array+0x38>)
 8002d18:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1a:	1b64      	subs	r4, r4, r5
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	2600      	movs	r6, #0
 8002d20:	42a6      	cmp	r6, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	4d0b      	ldr	r5, [pc, #44]	; (8002d54 <__libc_init_array+0x40>)
 8002d26:	4c0c      	ldr	r4, [pc, #48]	; (8002d58 <__libc_init_array+0x44>)
 8002d28:	f000 fff4 	bl	8003d14 <_init>
 8002d2c:	1b64      	subs	r4, r4, r5
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	2600      	movs	r6, #0
 8002d32:	42a6      	cmp	r6, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3c:	4798      	blx	r3
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d46:	4798      	blx	r3
 8002d48:	3601      	adds	r6, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	0800470c 	.word	0x0800470c
 8002d50:	0800470c 	.word	0x0800470c
 8002d54:	0800470c 	.word	0x0800470c
 8002d58:	08004710 	.word	0x08004710

08002d5c <malloc>:
 8002d5c:	4b02      	ldr	r3, [pc, #8]	; (8002d68 <malloc+0xc>)
 8002d5e:	4601      	mov	r1, r0
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	f000 b85b 	b.w	8002e1c <_malloc_r>
 8002d66:	bf00      	nop
 8002d68:	20000018 	.word	0x20000018

08002d6c <memset>:
 8002d6c:	4402      	add	r2, r0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d100      	bne.n	8002d76 <memset+0xa>
 8002d74:	4770      	bx	lr
 8002d76:	f803 1b01 	strb.w	r1, [r3], #1
 8002d7a:	e7f9      	b.n	8002d70 <memset+0x4>

08002d7c <_free_r>:
 8002d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d7e:	2900      	cmp	r1, #0
 8002d80:	d048      	beq.n	8002e14 <_free_r+0x98>
 8002d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d86:	9001      	str	r0, [sp, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8002d8e:	bfb8      	it	lt
 8002d90:	18e4      	addlt	r4, r4, r3
 8002d92:	f000 fc19 	bl	80035c8 <__malloc_lock>
 8002d96:	4a20      	ldr	r2, [pc, #128]	; (8002e18 <_free_r+0x9c>)
 8002d98:	9801      	ldr	r0, [sp, #4]
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	4615      	mov	r5, r2
 8002d9e:	b933      	cbnz	r3, 8002dae <_free_r+0x32>
 8002da0:	6063      	str	r3, [r4, #4]
 8002da2:	6014      	str	r4, [r2, #0]
 8002da4:	b003      	add	sp, #12
 8002da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002daa:	f000 bc13 	b.w	80035d4 <__malloc_unlock>
 8002dae:	42a3      	cmp	r3, r4
 8002db0:	d90b      	bls.n	8002dca <_free_r+0x4e>
 8002db2:	6821      	ldr	r1, [r4, #0]
 8002db4:	1862      	adds	r2, r4, r1
 8002db6:	4293      	cmp	r3, r2
 8002db8:	bf04      	itt	eq
 8002dba:	681a      	ldreq	r2, [r3, #0]
 8002dbc:	685b      	ldreq	r3, [r3, #4]
 8002dbe:	6063      	str	r3, [r4, #4]
 8002dc0:	bf04      	itt	eq
 8002dc2:	1852      	addeq	r2, r2, r1
 8002dc4:	6022      	streq	r2, [r4, #0]
 8002dc6:	602c      	str	r4, [r5, #0]
 8002dc8:	e7ec      	b.n	8002da4 <_free_r+0x28>
 8002dca:	461a      	mov	r2, r3
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	b10b      	cbz	r3, 8002dd4 <_free_r+0x58>
 8002dd0:	42a3      	cmp	r3, r4
 8002dd2:	d9fa      	bls.n	8002dca <_free_r+0x4e>
 8002dd4:	6811      	ldr	r1, [r2, #0]
 8002dd6:	1855      	adds	r5, r2, r1
 8002dd8:	42a5      	cmp	r5, r4
 8002dda:	d10b      	bne.n	8002df4 <_free_r+0x78>
 8002ddc:	6824      	ldr	r4, [r4, #0]
 8002dde:	4421      	add	r1, r4
 8002de0:	1854      	adds	r4, r2, r1
 8002de2:	42a3      	cmp	r3, r4
 8002de4:	6011      	str	r1, [r2, #0]
 8002de6:	d1dd      	bne.n	8002da4 <_free_r+0x28>
 8002de8:	681c      	ldr	r4, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	6053      	str	r3, [r2, #4]
 8002dee:	4421      	add	r1, r4
 8002df0:	6011      	str	r1, [r2, #0]
 8002df2:	e7d7      	b.n	8002da4 <_free_r+0x28>
 8002df4:	d902      	bls.n	8002dfc <_free_r+0x80>
 8002df6:	230c      	movs	r3, #12
 8002df8:	6003      	str	r3, [r0, #0]
 8002dfa:	e7d3      	b.n	8002da4 <_free_r+0x28>
 8002dfc:	6825      	ldr	r5, [r4, #0]
 8002dfe:	1961      	adds	r1, r4, r5
 8002e00:	428b      	cmp	r3, r1
 8002e02:	bf04      	itt	eq
 8002e04:	6819      	ldreq	r1, [r3, #0]
 8002e06:	685b      	ldreq	r3, [r3, #4]
 8002e08:	6063      	str	r3, [r4, #4]
 8002e0a:	bf04      	itt	eq
 8002e0c:	1949      	addeq	r1, r1, r5
 8002e0e:	6021      	streq	r1, [r4, #0]
 8002e10:	6054      	str	r4, [r2, #4]
 8002e12:	e7c7      	b.n	8002da4 <_free_r+0x28>
 8002e14:	b003      	add	sp, #12
 8002e16:	bd30      	pop	{r4, r5, pc}
 8002e18:	20000a38 	.word	0x20000a38

08002e1c <_malloc_r>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	1ccd      	adds	r5, r1, #3
 8002e20:	f025 0503 	bic.w	r5, r5, #3
 8002e24:	3508      	adds	r5, #8
 8002e26:	2d0c      	cmp	r5, #12
 8002e28:	bf38      	it	cc
 8002e2a:	250c      	movcc	r5, #12
 8002e2c:	2d00      	cmp	r5, #0
 8002e2e:	4606      	mov	r6, r0
 8002e30:	db01      	blt.n	8002e36 <_malloc_r+0x1a>
 8002e32:	42a9      	cmp	r1, r5
 8002e34:	d903      	bls.n	8002e3e <_malloc_r+0x22>
 8002e36:	230c      	movs	r3, #12
 8002e38:	6033      	str	r3, [r6, #0]
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e3e:	f000 fbc3 	bl	80035c8 <__malloc_lock>
 8002e42:	4921      	ldr	r1, [pc, #132]	; (8002ec8 <_malloc_r+0xac>)
 8002e44:	680a      	ldr	r2, [r1, #0]
 8002e46:	4614      	mov	r4, r2
 8002e48:	b99c      	cbnz	r4, 8002e72 <_malloc_r+0x56>
 8002e4a:	4f20      	ldr	r7, [pc, #128]	; (8002ecc <_malloc_r+0xb0>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b923      	cbnz	r3, 8002e5a <_malloc_r+0x3e>
 8002e50:	4621      	mov	r1, r4
 8002e52:	4630      	mov	r0, r6
 8002e54:	f000 f8ca 	bl	8002fec <_sbrk_r>
 8002e58:	6038      	str	r0, [r7, #0]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	4630      	mov	r0, r6
 8002e5e:	f000 f8c5 	bl	8002fec <_sbrk_r>
 8002e62:	1c43      	adds	r3, r0, #1
 8002e64:	d123      	bne.n	8002eae <_malloc_r+0x92>
 8002e66:	230c      	movs	r3, #12
 8002e68:	6033      	str	r3, [r6, #0]
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f000 fbb2 	bl	80035d4 <__malloc_unlock>
 8002e70:	e7e3      	b.n	8002e3a <_malloc_r+0x1e>
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	1b5b      	subs	r3, r3, r5
 8002e76:	d417      	bmi.n	8002ea8 <_malloc_r+0x8c>
 8002e78:	2b0b      	cmp	r3, #11
 8002e7a:	d903      	bls.n	8002e84 <_malloc_r+0x68>
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	441c      	add	r4, r3
 8002e80:	6025      	str	r5, [r4, #0]
 8002e82:	e004      	b.n	8002e8e <_malloc_r+0x72>
 8002e84:	6863      	ldr	r3, [r4, #4]
 8002e86:	42a2      	cmp	r2, r4
 8002e88:	bf0c      	ite	eq
 8002e8a:	600b      	streq	r3, [r1, #0]
 8002e8c:	6053      	strne	r3, [r2, #4]
 8002e8e:	4630      	mov	r0, r6
 8002e90:	f000 fba0 	bl	80035d4 <__malloc_unlock>
 8002e94:	f104 000b 	add.w	r0, r4, #11
 8002e98:	1d23      	adds	r3, r4, #4
 8002e9a:	f020 0007 	bic.w	r0, r0, #7
 8002e9e:	1ac2      	subs	r2, r0, r3
 8002ea0:	d0cc      	beq.n	8002e3c <_malloc_r+0x20>
 8002ea2:	1a1b      	subs	r3, r3, r0
 8002ea4:	50a3      	str	r3, [r4, r2]
 8002ea6:	e7c9      	b.n	8002e3c <_malloc_r+0x20>
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	6864      	ldr	r4, [r4, #4]
 8002eac:	e7cc      	b.n	8002e48 <_malloc_r+0x2c>
 8002eae:	1cc4      	adds	r4, r0, #3
 8002eb0:	f024 0403 	bic.w	r4, r4, #3
 8002eb4:	42a0      	cmp	r0, r4
 8002eb6:	d0e3      	beq.n	8002e80 <_malloc_r+0x64>
 8002eb8:	1a21      	subs	r1, r4, r0
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f000 f896 	bl	8002fec <_sbrk_r>
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d1dd      	bne.n	8002e80 <_malloc_r+0x64>
 8002ec4:	e7cf      	b.n	8002e66 <_malloc_r+0x4a>
 8002ec6:	bf00      	nop
 8002ec8:	20000a38 	.word	0x20000a38
 8002ecc:	20000a3c 	.word	0x20000a3c

08002ed0 <iprintf>:
 8002ed0:	b40f      	push	{r0, r1, r2, r3}
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <iprintf+0x2c>)
 8002ed4:	b513      	push	{r0, r1, r4, lr}
 8002ed6:	681c      	ldr	r4, [r3, #0]
 8002ed8:	b124      	cbz	r4, 8002ee4 <iprintf+0x14>
 8002eda:	69a3      	ldr	r3, [r4, #24]
 8002edc:	b913      	cbnz	r3, 8002ee4 <iprintf+0x14>
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f000 fa6e 	bl	80033c0 <__sinit>
 8002ee4:	ab05      	add	r3, sp, #20
 8002ee6:	9a04      	ldr	r2, [sp, #16]
 8002ee8:	68a1      	ldr	r1, [r4, #8]
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	4620      	mov	r0, r4
 8002eee:	f000 fba1 	bl	8003634 <_vfiprintf_r>
 8002ef2:	b002      	add	sp, #8
 8002ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef8:	b004      	add	sp, #16
 8002efa:	4770      	bx	lr
 8002efc:	20000018 	.word	0x20000018

08002f00 <_puts_r>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	460e      	mov	r6, r1
 8002f04:	4605      	mov	r5, r0
 8002f06:	b118      	cbz	r0, 8002f10 <_puts_r+0x10>
 8002f08:	6983      	ldr	r3, [r0, #24]
 8002f0a:	b90b      	cbnz	r3, 8002f10 <_puts_r+0x10>
 8002f0c:	f000 fa58 	bl	80033c0 <__sinit>
 8002f10:	69ab      	ldr	r3, [r5, #24]
 8002f12:	68ac      	ldr	r4, [r5, #8]
 8002f14:	b913      	cbnz	r3, 8002f1c <_puts_r+0x1c>
 8002f16:	4628      	mov	r0, r5
 8002f18:	f000 fa52 	bl	80033c0 <__sinit>
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <_puts_r+0xd0>)
 8002f1e:	429c      	cmp	r4, r3
 8002f20:	d120      	bne.n	8002f64 <_puts_r+0x64>
 8002f22:	686c      	ldr	r4, [r5, #4]
 8002f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f26:	07db      	lsls	r3, r3, #31
 8002f28:	d405      	bmi.n	8002f36 <_puts_r+0x36>
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	0598      	lsls	r0, r3, #22
 8002f2e:	d402      	bmi.n	8002f36 <_puts_r+0x36>
 8002f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f32:	f000 fae3 	bl	80034fc <__retarget_lock_acquire_recursive>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	0719      	lsls	r1, r3, #28
 8002f3a:	d51d      	bpl.n	8002f78 <_puts_r+0x78>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	b1db      	cbz	r3, 8002f78 <_puts_r+0x78>
 8002f40:	3e01      	subs	r6, #1
 8002f42:	68a3      	ldr	r3, [r4, #8]
 8002f44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	60a3      	str	r3, [r4, #8]
 8002f4c:	bb39      	cbnz	r1, 8002f9e <_puts_r+0x9e>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da38      	bge.n	8002fc4 <_puts_r+0xc4>
 8002f52:	4622      	mov	r2, r4
 8002f54:	210a      	movs	r1, #10
 8002f56:	4628      	mov	r0, r5
 8002f58:	f000 f858 	bl	800300c <__swbuf_r>
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d011      	beq.n	8002f84 <_puts_r+0x84>
 8002f60:	250a      	movs	r5, #10
 8002f62:	e011      	b.n	8002f88 <_puts_r+0x88>
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <_puts_r+0xd4>)
 8002f66:	429c      	cmp	r4, r3
 8002f68:	d101      	bne.n	8002f6e <_puts_r+0x6e>
 8002f6a:	68ac      	ldr	r4, [r5, #8]
 8002f6c:	e7da      	b.n	8002f24 <_puts_r+0x24>
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <_puts_r+0xd8>)
 8002f70:	429c      	cmp	r4, r3
 8002f72:	bf08      	it	eq
 8002f74:	68ec      	ldreq	r4, [r5, #12]
 8002f76:	e7d5      	b.n	8002f24 <_puts_r+0x24>
 8002f78:	4621      	mov	r1, r4
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f000 f898 	bl	80030b0 <__swsetup_r>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d0dd      	beq.n	8002f40 <_puts_r+0x40>
 8002f84:	f04f 35ff 	mov.w	r5, #4294967295
 8002f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f8a:	07da      	lsls	r2, r3, #31
 8002f8c:	d405      	bmi.n	8002f9a <_puts_r+0x9a>
 8002f8e:	89a3      	ldrh	r3, [r4, #12]
 8002f90:	059b      	lsls	r3, r3, #22
 8002f92:	d402      	bmi.n	8002f9a <_puts_r+0x9a>
 8002f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f96:	f000 fab2 	bl	80034fe <__retarget_lock_release_recursive>
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	da04      	bge.n	8002fac <_puts_r+0xac>
 8002fa2:	69a2      	ldr	r2, [r4, #24]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dc06      	bgt.n	8002fb6 <_puts_r+0xb6>
 8002fa8:	290a      	cmp	r1, #10
 8002faa:	d004      	beq.n	8002fb6 <_puts_r+0xb6>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	6022      	str	r2, [r4, #0]
 8002fb2:	7019      	strb	r1, [r3, #0]
 8002fb4:	e7c5      	b.n	8002f42 <_puts_r+0x42>
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f000 f827 	bl	800300c <__swbuf_r>
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	d1bf      	bne.n	8002f42 <_puts_r+0x42>
 8002fc2:	e7df      	b.n	8002f84 <_puts_r+0x84>
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	250a      	movs	r5, #10
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	6022      	str	r2, [r4, #0]
 8002fcc:	701d      	strb	r5, [r3, #0]
 8002fce:	e7db      	b.n	8002f88 <_puts_r+0x88>
 8002fd0:	08004690 	.word	0x08004690
 8002fd4:	080046b0 	.word	0x080046b0
 8002fd8:	08004670 	.word	0x08004670

08002fdc <puts>:
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <puts+0xc>)
 8002fde:	4601      	mov	r1, r0
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	f7ff bf8d 	b.w	8002f00 <_puts_r>
 8002fe6:	bf00      	nop
 8002fe8:	20000018 	.word	0x20000018

08002fec <_sbrk_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4d06      	ldr	r5, [pc, #24]	; (8003008 <_sbrk_r+0x1c>)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	602b      	str	r3, [r5, #0]
 8002ff8:	f7fe fa8e 	bl	8001518 <_sbrk>
 8002ffc:	1c43      	adds	r3, r0, #1
 8002ffe:	d102      	bne.n	8003006 <_sbrk_r+0x1a>
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	b103      	cbz	r3, 8003006 <_sbrk_r+0x1a>
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	bd38      	pop	{r3, r4, r5, pc}
 8003008:	20000e98 	.word	0x20000e98

0800300c <__swbuf_r>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	460e      	mov	r6, r1
 8003010:	4614      	mov	r4, r2
 8003012:	4605      	mov	r5, r0
 8003014:	b118      	cbz	r0, 800301e <__swbuf_r+0x12>
 8003016:	6983      	ldr	r3, [r0, #24]
 8003018:	b90b      	cbnz	r3, 800301e <__swbuf_r+0x12>
 800301a:	f000 f9d1 	bl	80033c0 <__sinit>
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <__swbuf_r+0x98>)
 8003020:	429c      	cmp	r4, r3
 8003022:	d12b      	bne.n	800307c <__swbuf_r+0x70>
 8003024:	686c      	ldr	r4, [r5, #4]
 8003026:	69a3      	ldr	r3, [r4, #24]
 8003028:	60a3      	str	r3, [r4, #8]
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	071a      	lsls	r2, r3, #28
 800302e:	d52f      	bpl.n	8003090 <__swbuf_r+0x84>
 8003030:	6923      	ldr	r3, [r4, #16]
 8003032:	b36b      	cbz	r3, 8003090 <__swbuf_r+0x84>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	1ac0      	subs	r0, r0, r3
 800303a:	6963      	ldr	r3, [r4, #20]
 800303c:	b2f6      	uxtb	r6, r6
 800303e:	4283      	cmp	r3, r0
 8003040:	4637      	mov	r7, r6
 8003042:	dc04      	bgt.n	800304e <__swbuf_r+0x42>
 8003044:	4621      	mov	r1, r4
 8003046:	4628      	mov	r0, r5
 8003048:	f000 f926 	bl	8003298 <_fflush_r>
 800304c:	bb30      	cbnz	r0, 800309c <__swbuf_r+0x90>
 800304e:	68a3      	ldr	r3, [r4, #8]
 8003050:	3b01      	subs	r3, #1
 8003052:	60a3      	str	r3, [r4, #8]
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	6022      	str	r2, [r4, #0]
 800305a:	701e      	strb	r6, [r3, #0]
 800305c:	6963      	ldr	r3, [r4, #20]
 800305e:	3001      	adds	r0, #1
 8003060:	4283      	cmp	r3, r0
 8003062:	d004      	beq.n	800306e <__swbuf_r+0x62>
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	07db      	lsls	r3, r3, #31
 8003068:	d506      	bpl.n	8003078 <__swbuf_r+0x6c>
 800306a:	2e0a      	cmp	r6, #10
 800306c:	d104      	bne.n	8003078 <__swbuf_r+0x6c>
 800306e:	4621      	mov	r1, r4
 8003070:	4628      	mov	r0, r5
 8003072:	f000 f911 	bl	8003298 <_fflush_r>
 8003076:	b988      	cbnz	r0, 800309c <__swbuf_r+0x90>
 8003078:	4638      	mov	r0, r7
 800307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <__swbuf_r+0x9c>)
 800307e:	429c      	cmp	r4, r3
 8003080:	d101      	bne.n	8003086 <__swbuf_r+0x7a>
 8003082:	68ac      	ldr	r4, [r5, #8]
 8003084:	e7cf      	b.n	8003026 <__swbuf_r+0x1a>
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <__swbuf_r+0xa0>)
 8003088:	429c      	cmp	r4, r3
 800308a:	bf08      	it	eq
 800308c:	68ec      	ldreq	r4, [r5, #12]
 800308e:	e7ca      	b.n	8003026 <__swbuf_r+0x1a>
 8003090:	4621      	mov	r1, r4
 8003092:	4628      	mov	r0, r5
 8003094:	f000 f80c 	bl	80030b0 <__swsetup_r>
 8003098:	2800      	cmp	r0, #0
 800309a:	d0cb      	beq.n	8003034 <__swbuf_r+0x28>
 800309c:	f04f 37ff 	mov.w	r7, #4294967295
 80030a0:	e7ea      	b.n	8003078 <__swbuf_r+0x6c>
 80030a2:	bf00      	nop
 80030a4:	08004690 	.word	0x08004690
 80030a8:	080046b0 	.word	0x080046b0
 80030ac:	08004670 	.word	0x08004670

080030b0 <__swsetup_r>:
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <__swsetup_r+0xcc>)
 80030b2:	b570      	push	{r4, r5, r6, lr}
 80030b4:	681d      	ldr	r5, [r3, #0]
 80030b6:	4606      	mov	r6, r0
 80030b8:	460c      	mov	r4, r1
 80030ba:	b125      	cbz	r5, 80030c6 <__swsetup_r+0x16>
 80030bc:	69ab      	ldr	r3, [r5, #24]
 80030be:	b913      	cbnz	r3, 80030c6 <__swsetup_r+0x16>
 80030c0:	4628      	mov	r0, r5
 80030c2:	f000 f97d 	bl	80033c0 <__sinit>
 80030c6:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <__swsetup_r+0xd0>)
 80030c8:	429c      	cmp	r4, r3
 80030ca:	d10f      	bne.n	80030ec <__swsetup_r+0x3c>
 80030cc:	686c      	ldr	r4, [r5, #4]
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030d4:	0719      	lsls	r1, r3, #28
 80030d6:	d42c      	bmi.n	8003132 <__swsetup_r+0x82>
 80030d8:	06dd      	lsls	r5, r3, #27
 80030da:	d411      	bmi.n	8003100 <__swsetup_r+0x50>
 80030dc:	2309      	movs	r3, #9
 80030de:	6033      	str	r3, [r6, #0]
 80030e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030e4:	81a3      	strh	r3, [r4, #12]
 80030e6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ea:	e03e      	b.n	800316a <__swsetup_r+0xba>
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <__swsetup_r+0xd4>)
 80030ee:	429c      	cmp	r4, r3
 80030f0:	d101      	bne.n	80030f6 <__swsetup_r+0x46>
 80030f2:	68ac      	ldr	r4, [r5, #8]
 80030f4:	e7eb      	b.n	80030ce <__swsetup_r+0x1e>
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <__swsetup_r+0xd8>)
 80030f8:	429c      	cmp	r4, r3
 80030fa:	bf08      	it	eq
 80030fc:	68ec      	ldreq	r4, [r5, #12]
 80030fe:	e7e6      	b.n	80030ce <__swsetup_r+0x1e>
 8003100:	0758      	lsls	r0, r3, #29
 8003102:	d512      	bpl.n	800312a <__swsetup_r+0x7a>
 8003104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003106:	b141      	cbz	r1, 800311a <__swsetup_r+0x6a>
 8003108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800310c:	4299      	cmp	r1, r3
 800310e:	d002      	beq.n	8003116 <__swsetup_r+0x66>
 8003110:	4630      	mov	r0, r6
 8003112:	f7ff fe33 	bl	8002d7c <_free_r>
 8003116:	2300      	movs	r3, #0
 8003118:	6363      	str	r3, [r4, #52]	; 0x34
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003120:	81a3      	strh	r3, [r4, #12]
 8003122:	2300      	movs	r3, #0
 8003124:	6063      	str	r3, [r4, #4]
 8003126:	6923      	ldr	r3, [r4, #16]
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	81a3      	strh	r3, [r4, #12]
 8003132:	6923      	ldr	r3, [r4, #16]
 8003134:	b94b      	cbnz	r3, 800314a <__swsetup_r+0x9a>
 8003136:	89a3      	ldrh	r3, [r4, #12]
 8003138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800313c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003140:	d003      	beq.n	800314a <__swsetup_r+0x9a>
 8003142:	4621      	mov	r1, r4
 8003144:	4630      	mov	r0, r6
 8003146:	f000 f9ff 	bl	8003548 <__smakebuf_r>
 800314a:	89a0      	ldrh	r0, [r4, #12]
 800314c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003150:	f010 0301 	ands.w	r3, r0, #1
 8003154:	d00a      	beq.n	800316c <__swsetup_r+0xbc>
 8003156:	2300      	movs	r3, #0
 8003158:	60a3      	str	r3, [r4, #8]
 800315a:	6963      	ldr	r3, [r4, #20]
 800315c:	425b      	negs	r3, r3
 800315e:	61a3      	str	r3, [r4, #24]
 8003160:	6923      	ldr	r3, [r4, #16]
 8003162:	b943      	cbnz	r3, 8003176 <__swsetup_r+0xc6>
 8003164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003168:	d1ba      	bne.n	80030e0 <__swsetup_r+0x30>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
 800316c:	0781      	lsls	r1, r0, #30
 800316e:	bf58      	it	pl
 8003170:	6963      	ldrpl	r3, [r4, #20]
 8003172:	60a3      	str	r3, [r4, #8]
 8003174:	e7f4      	b.n	8003160 <__swsetup_r+0xb0>
 8003176:	2000      	movs	r0, #0
 8003178:	e7f7      	b.n	800316a <__swsetup_r+0xba>
 800317a:	bf00      	nop
 800317c:	20000018 	.word	0x20000018
 8003180:	08004690 	.word	0x08004690
 8003184:	080046b0 	.word	0x080046b0
 8003188:	08004670 	.word	0x08004670

0800318c <__sflush_r>:
 800318c:	898a      	ldrh	r2, [r1, #12]
 800318e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003192:	4605      	mov	r5, r0
 8003194:	0710      	lsls	r0, r2, #28
 8003196:	460c      	mov	r4, r1
 8003198:	d458      	bmi.n	800324c <__sflush_r+0xc0>
 800319a:	684b      	ldr	r3, [r1, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	dc05      	bgt.n	80031ac <__sflush_r+0x20>
 80031a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	dc02      	bgt.n	80031ac <__sflush_r+0x20>
 80031a6:	2000      	movs	r0, #0
 80031a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031ae:	2e00      	cmp	r6, #0
 80031b0:	d0f9      	beq.n	80031a6 <__sflush_r+0x1a>
 80031b2:	2300      	movs	r3, #0
 80031b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031b8:	682f      	ldr	r7, [r5, #0]
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	d032      	beq.n	8003224 <__sflush_r+0x98>
 80031be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	075a      	lsls	r2, r3, #29
 80031c4:	d505      	bpl.n	80031d2 <__sflush_r+0x46>
 80031c6:	6863      	ldr	r3, [r4, #4]
 80031c8:	1ac0      	subs	r0, r0, r3
 80031ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031cc:	b10b      	cbz	r3, 80031d2 <__sflush_r+0x46>
 80031ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031d0:	1ac0      	subs	r0, r0, r3
 80031d2:	2300      	movs	r3, #0
 80031d4:	4602      	mov	r2, r0
 80031d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031d8:	6a21      	ldr	r1, [r4, #32]
 80031da:	4628      	mov	r0, r5
 80031dc:	47b0      	blx	r6
 80031de:	1c43      	adds	r3, r0, #1
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	d106      	bne.n	80031f2 <__sflush_r+0x66>
 80031e4:	6829      	ldr	r1, [r5, #0]
 80031e6:	291d      	cmp	r1, #29
 80031e8:	d82c      	bhi.n	8003244 <__sflush_r+0xb8>
 80031ea:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <__sflush_r+0x108>)
 80031ec:	40ca      	lsrs	r2, r1
 80031ee:	07d6      	lsls	r6, r2, #31
 80031f0:	d528      	bpl.n	8003244 <__sflush_r+0xb8>
 80031f2:	2200      	movs	r2, #0
 80031f4:	6062      	str	r2, [r4, #4]
 80031f6:	04d9      	lsls	r1, r3, #19
 80031f8:	6922      	ldr	r2, [r4, #16]
 80031fa:	6022      	str	r2, [r4, #0]
 80031fc:	d504      	bpl.n	8003208 <__sflush_r+0x7c>
 80031fe:	1c42      	adds	r2, r0, #1
 8003200:	d101      	bne.n	8003206 <__sflush_r+0x7a>
 8003202:	682b      	ldr	r3, [r5, #0]
 8003204:	b903      	cbnz	r3, 8003208 <__sflush_r+0x7c>
 8003206:	6560      	str	r0, [r4, #84]	; 0x54
 8003208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800320a:	602f      	str	r7, [r5, #0]
 800320c:	2900      	cmp	r1, #0
 800320e:	d0ca      	beq.n	80031a6 <__sflush_r+0x1a>
 8003210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003214:	4299      	cmp	r1, r3
 8003216:	d002      	beq.n	800321e <__sflush_r+0x92>
 8003218:	4628      	mov	r0, r5
 800321a:	f7ff fdaf 	bl	8002d7c <_free_r>
 800321e:	2000      	movs	r0, #0
 8003220:	6360      	str	r0, [r4, #52]	; 0x34
 8003222:	e7c1      	b.n	80031a8 <__sflush_r+0x1c>
 8003224:	6a21      	ldr	r1, [r4, #32]
 8003226:	2301      	movs	r3, #1
 8003228:	4628      	mov	r0, r5
 800322a:	47b0      	blx	r6
 800322c:	1c41      	adds	r1, r0, #1
 800322e:	d1c7      	bne.n	80031c0 <__sflush_r+0x34>
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0c4      	beq.n	80031c0 <__sflush_r+0x34>
 8003236:	2b1d      	cmp	r3, #29
 8003238:	d001      	beq.n	800323e <__sflush_r+0xb2>
 800323a:	2b16      	cmp	r3, #22
 800323c:	d101      	bne.n	8003242 <__sflush_r+0xb6>
 800323e:	602f      	str	r7, [r5, #0]
 8003240:	e7b1      	b.n	80031a6 <__sflush_r+0x1a>
 8003242:	89a3      	ldrh	r3, [r4, #12]
 8003244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003248:	81a3      	strh	r3, [r4, #12]
 800324a:	e7ad      	b.n	80031a8 <__sflush_r+0x1c>
 800324c:	690f      	ldr	r7, [r1, #16]
 800324e:	2f00      	cmp	r7, #0
 8003250:	d0a9      	beq.n	80031a6 <__sflush_r+0x1a>
 8003252:	0793      	lsls	r3, r2, #30
 8003254:	680e      	ldr	r6, [r1, #0]
 8003256:	bf08      	it	eq
 8003258:	694b      	ldreq	r3, [r1, #20]
 800325a:	600f      	str	r7, [r1, #0]
 800325c:	bf18      	it	ne
 800325e:	2300      	movne	r3, #0
 8003260:	eba6 0807 	sub.w	r8, r6, r7
 8003264:	608b      	str	r3, [r1, #8]
 8003266:	f1b8 0f00 	cmp.w	r8, #0
 800326a:	dd9c      	ble.n	80031a6 <__sflush_r+0x1a>
 800326c:	6a21      	ldr	r1, [r4, #32]
 800326e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003270:	4643      	mov	r3, r8
 8003272:	463a      	mov	r2, r7
 8003274:	4628      	mov	r0, r5
 8003276:	47b0      	blx	r6
 8003278:	2800      	cmp	r0, #0
 800327a:	dc06      	bgt.n	800328a <__sflush_r+0xfe>
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	e78e      	b.n	80031a8 <__sflush_r+0x1c>
 800328a:	4407      	add	r7, r0
 800328c:	eba8 0800 	sub.w	r8, r8, r0
 8003290:	e7e9      	b.n	8003266 <__sflush_r+0xda>
 8003292:	bf00      	nop
 8003294:	20400001 	.word	0x20400001

08003298 <_fflush_r>:
 8003298:	b538      	push	{r3, r4, r5, lr}
 800329a:	690b      	ldr	r3, [r1, #16]
 800329c:	4605      	mov	r5, r0
 800329e:	460c      	mov	r4, r1
 80032a0:	b913      	cbnz	r3, 80032a8 <_fflush_r+0x10>
 80032a2:	2500      	movs	r5, #0
 80032a4:	4628      	mov	r0, r5
 80032a6:	bd38      	pop	{r3, r4, r5, pc}
 80032a8:	b118      	cbz	r0, 80032b2 <_fflush_r+0x1a>
 80032aa:	6983      	ldr	r3, [r0, #24]
 80032ac:	b90b      	cbnz	r3, 80032b2 <_fflush_r+0x1a>
 80032ae:	f000 f887 	bl	80033c0 <__sinit>
 80032b2:	4b14      	ldr	r3, [pc, #80]	; (8003304 <_fflush_r+0x6c>)
 80032b4:	429c      	cmp	r4, r3
 80032b6:	d11b      	bne.n	80032f0 <_fflush_r+0x58>
 80032b8:	686c      	ldr	r4, [r5, #4]
 80032ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0ef      	beq.n	80032a2 <_fflush_r+0xa>
 80032c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032c4:	07d0      	lsls	r0, r2, #31
 80032c6:	d404      	bmi.n	80032d2 <_fflush_r+0x3a>
 80032c8:	0599      	lsls	r1, r3, #22
 80032ca:	d402      	bmi.n	80032d2 <_fflush_r+0x3a>
 80032cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ce:	f000 f915 	bl	80034fc <__retarget_lock_acquire_recursive>
 80032d2:	4628      	mov	r0, r5
 80032d4:	4621      	mov	r1, r4
 80032d6:	f7ff ff59 	bl	800318c <__sflush_r>
 80032da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032dc:	07da      	lsls	r2, r3, #31
 80032de:	4605      	mov	r5, r0
 80032e0:	d4e0      	bmi.n	80032a4 <_fflush_r+0xc>
 80032e2:	89a3      	ldrh	r3, [r4, #12]
 80032e4:	059b      	lsls	r3, r3, #22
 80032e6:	d4dd      	bmi.n	80032a4 <_fflush_r+0xc>
 80032e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ea:	f000 f908 	bl	80034fe <__retarget_lock_release_recursive>
 80032ee:	e7d9      	b.n	80032a4 <_fflush_r+0xc>
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <_fflush_r+0x70>)
 80032f2:	429c      	cmp	r4, r3
 80032f4:	d101      	bne.n	80032fa <_fflush_r+0x62>
 80032f6:	68ac      	ldr	r4, [r5, #8]
 80032f8:	e7df      	b.n	80032ba <_fflush_r+0x22>
 80032fa:	4b04      	ldr	r3, [pc, #16]	; (800330c <_fflush_r+0x74>)
 80032fc:	429c      	cmp	r4, r3
 80032fe:	bf08      	it	eq
 8003300:	68ec      	ldreq	r4, [r5, #12]
 8003302:	e7da      	b.n	80032ba <_fflush_r+0x22>
 8003304:	08004690 	.word	0x08004690
 8003308:	080046b0 	.word	0x080046b0
 800330c:	08004670 	.word	0x08004670

08003310 <std>:
 8003310:	2300      	movs	r3, #0
 8003312:	b510      	push	{r4, lr}
 8003314:	4604      	mov	r4, r0
 8003316:	e9c0 3300 	strd	r3, r3, [r0]
 800331a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800331e:	6083      	str	r3, [r0, #8]
 8003320:	8181      	strh	r1, [r0, #12]
 8003322:	6643      	str	r3, [r0, #100]	; 0x64
 8003324:	81c2      	strh	r2, [r0, #14]
 8003326:	6183      	str	r3, [r0, #24]
 8003328:	4619      	mov	r1, r3
 800332a:	2208      	movs	r2, #8
 800332c:	305c      	adds	r0, #92	; 0x5c
 800332e:	f7ff fd1d 	bl	8002d6c <memset>
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <std+0x38>)
 8003334:	6263      	str	r3, [r4, #36]	; 0x24
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <std+0x3c>)
 8003338:	62a3      	str	r3, [r4, #40]	; 0x28
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <std+0x40>)
 800333c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <std+0x44>)
 8003340:	6224      	str	r4, [r4, #32]
 8003342:	6323      	str	r3, [r4, #48]	; 0x30
 8003344:	bd10      	pop	{r4, pc}
 8003346:	bf00      	nop
 8003348:	08003bbd 	.word	0x08003bbd
 800334c:	08003bdf 	.word	0x08003bdf
 8003350:	08003c17 	.word	0x08003c17
 8003354:	08003c3b 	.word	0x08003c3b

08003358 <_cleanup_r>:
 8003358:	4901      	ldr	r1, [pc, #4]	; (8003360 <_cleanup_r+0x8>)
 800335a:	f000 b8af 	b.w	80034bc <_fwalk_reent>
 800335e:	bf00      	nop
 8003360:	08003299 	.word	0x08003299

08003364 <__sfmoreglue>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	1e4a      	subs	r2, r1, #1
 8003368:	2568      	movs	r5, #104	; 0x68
 800336a:	4355      	muls	r5, r2
 800336c:	460e      	mov	r6, r1
 800336e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003372:	f7ff fd53 	bl	8002e1c <_malloc_r>
 8003376:	4604      	mov	r4, r0
 8003378:	b140      	cbz	r0, 800338c <__sfmoreglue+0x28>
 800337a:	2100      	movs	r1, #0
 800337c:	e9c0 1600 	strd	r1, r6, [r0]
 8003380:	300c      	adds	r0, #12
 8003382:	60a0      	str	r0, [r4, #8]
 8003384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003388:	f7ff fcf0 	bl	8002d6c <memset>
 800338c:	4620      	mov	r0, r4
 800338e:	bd70      	pop	{r4, r5, r6, pc}

08003390 <__sfp_lock_acquire>:
 8003390:	4801      	ldr	r0, [pc, #4]	; (8003398 <__sfp_lock_acquire+0x8>)
 8003392:	f000 b8b3 	b.w	80034fc <__retarget_lock_acquire_recursive>
 8003396:	bf00      	nop
 8003398:	20000e94 	.word	0x20000e94

0800339c <__sfp_lock_release>:
 800339c:	4801      	ldr	r0, [pc, #4]	; (80033a4 <__sfp_lock_release+0x8>)
 800339e:	f000 b8ae 	b.w	80034fe <__retarget_lock_release_recursive>
 80033a2:	bf00      	nop
 80033a4:	20000e94 	.word	0x20000e94

080033a8 <__sinit_lock_acquire>:
 80033a8:	4801      	ldr	r0, [pc, #4]	; (80033b0 <__sinit_lock_acquire+0x8>)
 80033aa:	f000 b8a7 	b.w	80034fc <__retarget_lock_acquire_recursive>
 80033ae:	bf00      	nop
 80033b0:	20000e8f 	.word	0x20000e8f

080033b4 <__sinit_lock_release>:
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <__sinit_lock_release+0x8>)
 80033b6:	f000 b8a2 	b.w	80034fe <__retarget_lock_release_recursive>
 80033ba:	bf00      	nop
 80033bc:	20000e8f 	.word	0x20000e8f

080033c0 <__sinit>:
 80033c0:	b510      	push	{r4, lr}
 80033c2:	4604      	mov	r4, r0
 80033c4:	f7ff fff0 	bl	80033a8 <__sinit_lock_acquire>
 80033c8:	69a3      	ldr	r3, [r4, #24]
 80033ca:	b11b      	cbz	r3, 80033d4 <__sinit+0x14>
 80033cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d0:	f7ff bff0 	b.w	80033b4 <__sinit_lock_release>
 80033d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033d8:	6523      	str	r3, [r4, #80]	; 0x50
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <__sinit+0x68>)
 80033dc:	4a13      	ldr	r2, [pc, #76]	; (800342c <__sinit+0x6c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80033e2:	42a3      	cmp	r3, r4
 80033e4:	bf04      	itt	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	61a3      	streq	r3, [r4, #24]
 80033ea:	4620      	mov	r0, r4
 80033ec:	f000 f820 	bl	8003430 <__sfp>
 80033f0:	6060      	str	r0, [r4, #4]
 80033f2:	4620      	mov	r0, r4
 80033f4:	f000 f81c 	bl	8003430 <__sfp>
 80033f8:	60a0      	str	r0, [r4, #8]
 80033fa:	4620      	mov	r0, r4
 80033fc:	f000 f818 	bl	8003430 <__sfp>
 8003400:	2200      	movs	r2, #0
 8003402:	60e0      	str	r0, [r4, #12]
 8003404:	2104      	movs	r1, #4
 8003406:	6860      	ldr	r0, [r4, #4]
 8003408:	f7ff ff82 	bl	8003310 <std>
 800340c:	68a0      	ldr	r0, [r4, #8]
 800340e:	2201      	movs	r2, #1
 8003410:	2109      	movs	r1, #9
 8003412:	f7ff ff7d 	bl	8003310 <std>
 8003416:	68e0      	ldr	r0, [r4, #12]
 8003418:	2202      	movs	r2, #2
 800341a:	2112      	movs	r1, #18
 800341c:	f7ff ff78 	bl	8003310 <std>
 8003420:	2301      	movs	r3, #1
 8003422:	61a3      	str	r3, [r4, #24]
 8003424:	e7d2      	b.n	80033cc <__sinit+0xc>
 8003426:	bf00      	nop
 8003428:	0800466c 	.word	0x0800466c
 800342c:	08003359 	.word	0x08003359

08003430 <__sfp>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	4607      	mov	r7, r0
 8003434:	f7ff ffac 	bl	8003390 <__sfp_lock_acquire>
 8003438:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <__sfp+0x84>)
 800343a:	681e      	ldr	r6, [r3, #0]
 800343c:	69b3      	ldr	r3, [r6, #24]
 800343e:	b913      	cbnz	r3, 8003446 <__sfp+0x16>
 8003440:	4630      	mov	r0, r6
 8003442:	f7ff ffbd 	bl	80033c0 <__sinit>
 8003446:	3648      	adds	r6, #72	; 0x48
 8003448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800344c:	3b01      	subs	r3, #1
 800344e:	d503      	bpl.n	8003458 <__sfp+0x28>
 8003450:	6833      	ldr	r3, [r6, #0]
 8003452:	b30b      	cbz	r3, 8003498 <__sfp+0x68>
 8003454:	6836      	ldr	r6, [r6, #0]
 8003456:	e7f7      	b.n	8003448 <__sfp+0x18>
 8003458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800345c:	b9d5      	cbnz	r5, 8003494 <__sfp+0x64>
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <__sfp+0x88>)
 8003460:	60e3      	str	r3, [r4, #12]
 8003462:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003466:	6665      	str	r5, [r4, #100]	; 0x64
 8003468:	f000 f847 	bl	80034fa <__retarget_lock_init_recursive>
 800346c:	f7ff ff96 	bl	800339c <__sfp_lock_release>
 8003470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003478:	6025      	str	r5, [r4, #0]
 800347a:	61a5      	str	r5, [r4, #24]
 800347c:	2208      	movs	r2, #8
 800347e:	4629      	mov	r1, r5
 8003480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003484:	f7ff fc72 	bl	8002d6c <memset>
 8003488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800348c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003490:	4620      	mov	r0, r4
 8003492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003494:	3468      	adds	r4, #104	; 0x68
 8003496:	e7d9      	b.n	800344c <__sfp+0x1c>
 8003498:	2104      	movs	r1, #4
 800349a:	4638      	mov	r0, r7
 800349c:	f7ff ff62 	bl	8003364 <__sfmoreglue>
 80034a0:	4604      	mov	r4, r0
 80034a2:	6030      	str	r0, [r6, #0]
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d1d5      	bne.n	8003454 <__sfp+0x24>
 80034a8:	f7ff ff78 	bl	800339c <__sfp_lock_release>
 80034ac:	230c      	movs	r3, #12
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	e7ee      	b.n	8003490 <__sfp+0x60>
 80034b2:	bf00      	nop
 80034b4:	0800466c 	.word	0x0800466c
 80034b8:	ffff0001 	.word	0xffff0001

080034bc <_fwalk_reent>:
 80034bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c0:	4606      	mov	r6, r0
 80034c2:	4688      	mov	r8, r1
 80034c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034c8:	2700      	movs	r7, #0
 80034ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034ce:	f1b9 0901 	subs.w	r9, r9, #1
 80034d2:	d505      	bpl.n	80034e0 <_fwalk_reent+0x24>
 80034d4:	6824      	ldr	r4, [r4, #0]
 80034d6:	2c00      	cmp	r4, #0
 80034d8:	d1f7      	bne.n	80034ca <_fwalk_reent+0xe>
 80034da:	4638      	mov	r0, r7
 80034dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e0:	89ab      	ldrh	r3, [r5, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d907      	bls.n	80034f6 <_fwalk_reent+0x3a>
 80034e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034ea:	3301      	adds	r3, #1
 80034ec:	d003      	beq.n	80034f6 <_fwalk_reent+0x3a>
 80034ee:	4629      	mov	r1, r5
 80034f0:	4630      	mov	r0, r6
 80034f2:	47c0      	blx	r8
 80034f4:	4307      	orrs	r7, r0
 80034f6:	3568      	adds	r5, #104	; 0x68
 80034f8:	e7e9      	b.n	80034ce <_fwalk_reent+0x12>

080034fa <__retarget_lock_init_recursive>:
 80034fa:	4770      	bx	lr

080034fc <__retarget_lock_acquire_recursive>:
 80034fc:	4770      	bx	lr

080034fe <__retarget_lock_release_recursive>:
 80034fe:	4770      	bx	lr

08003500 <__swhatbuf_r>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	460e      	mov	r6, r1
 8003504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003508:	2900      	cmp	r1, #0
 800350a:	b096      	sub	sp, #88	; 0x58
 800350c:	4614      	mov	r4, r2
 800350e:	461d      	mov	r5, r3
 8003510:	da07      	bge.n	8003522 <__swhatbuf_r+0x22>
 8003512:	2300      	movs	r3, #0
 8003514:	602b      	str	r3, [r5, #0]
 8003516:	89b3      	ldrh	r3, [r6, #12]
 8003518:	061a      	lsls	r2, r3, #24
 800351a:	d410      	bmi.n	800353e <__swhatbuf_r+0x3e>
 800351c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003520:	e00e      	b.n	8003540 <__swhatbuf_r+0x40>
 8003522:	466a      	mov	r2, sp
 8003524:	f000 fbb0 	bl	8003c88 <_fstat_r>
 8003528:	2800      	cmp	r0, #0
 800352a:	dbf2      	blt.n	8003512 <__swhatbuf_r+0x12>
 800352c:	9a01      	ldr	r2, [sp, #4]
 800352e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003532:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003536:	425a      	negs	r2, r3
 8003538:	415a      	adcs	r2, r3
 800353a:	602a      	str	r2, [r5, #0]
 800353c:	e7ee      	b.n	800351c <__swhatbuf_r+0x1c>
 800353e:	2340      	movs	r3, #64	; 0x40
 8003540:	2000      	movs	r0, #0
 8003542:	6023      	str	r3, [r4, #0]
 8003544:	b016      	add	sp, #88	; 0x58
 8003546:	bd70      	pop	{r4, r5, r6, pc}

08003548 <__smakebuf_r>:
 8003548:	898b      	ldrh	r3, [r1, #12]
 800354a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800354c:	079d      	lsls	r5, r3, #30
 800354e:	4606      	mov	r6, r0
 8003550:	460c      	mov	r4, r1
 8003552:	d507      	bpl.n	8003564 <__smakebuf_r+0x1c>
 8003554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	6123      	str	r3, [r4, #16]
 800355c:	2301      	movs	r3, #1
 800355e:	6163      	str	r3, [r4, #20]
 8003560:	b002      	add	sp, #8
 8003562:	bd70      	pop	{r4, r5, r6, pc}
 8003564:	ab01      	add	r3, sp, #4
 8003566:	466a      	mov	r2, sp
 8003568:	f7ff ffca 	bl	8003500 <__swhatbuf_r>
 800356c:	9900      	ldr	r1, [sp, #0]
 800356e:	4605      	mov	r5, r0
 8003570:	4630      	mov	r0, r6
 8003572:	f7ff fc53 	bl	8002e1c <_malloc_r>
 8003576:	b948      	cbnz	r0, 800358c <__smakebuf_r+0x44>
 8003578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800357c:	059a      	lsls	r2, r3, #22
 800357e:	d4ef      	bmi.n	8003560 <__smakebuf_r+0x18>
 8003580:	f023 0303 	bic.w	r3, r3, #3
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	81a3      	strh	r3, [r4, #12]
 800358a:	e7e3      	b.n	8003554 <__smakebuf_r+0xc>
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <__smakebuf_r+0x7c>)
 800358e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	6020      	str	r0, [r4, #0]
 8003594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003598:	81a3      	strh	r3, [r4, #12]
 800359a:	9b00      	ldr	r3, [sp, #0]
 800359c:	6163      	str	r3, [r4, #20]
 800359e:	9b01      	ldr	r3, [sp, #4]
 80035a0:	6120      	str	r0, [r4, #16]
 80035a2:	b15b      	cbz	r3, 80035bc <__smakebuf_r+0x74>
 80035a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035a8:	4630      	mov	r0, r6
 80035aa:	f000 fb7f 	bl	8003cac <_isatty_r>
 80035ae:	b128      	cbz	r0, 80035bc <__smakebuf_r+0x74>
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	81a3      	strh	r3, [r4, #12]
 80035bc:	89a0      	ldrh	r0, [r4, #12]
 80035be:	4305      	orrs	r5, r0
 80035c0:	81a5      	strh	r5, [r4, #12]
 80035c2:	e7cd      	b.n	8003560 <__smakebuf_r+0x18>
 80035c4:	08003359 	.word	0x08003359

080035c8 <__malloc_lock>:
 80035c8:	4801      	ldr	r0, [pc, #4]	; (80035d0 <__malloc_lock+0x8>)
 80035ca:	f7ff bf97 	b.w	80034fc <__retarget_lock_acquire_recursive>
 80035ce:	bf00      	nop
 80035d0:	20000e90 	.word	0x20000e90

080035d4 <__malloc_unlock>:
 80035d4:	4801      	ldr	r0, [pc, #4]	; (80035dc <__malloc_unlock+0x8>)
 80035d6:	f7ff bf92 	b.w	80034fe <__retarget_lock_release_recursive>
 80035da:	bf00      	nop
 80035dc:	20000e90 	.word	0x20000e90

080035e0 <__sfputc_r>:
 80035e0:	6893      	ldr	r3, [r2, #8]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	b410      	push	{r4}
 80035e8:	6093      	str	r3, [r2, #8]
 80035ea:	da08      	bge.n	80035fe <__sfputc_r+0x1e>
 80035ec:	6994      	ldr	r4, [r2, #24]
 80035ee:	42a3      	cmp	r3, r4
 80035f0:	db01      	blt.n	80035f6 <__sfputc_r+0x16>
 80035f2:	290a      	cmp	r1, #10
 80035f4:	d103      	bne.n	80035fe <__sfputc_r+0x1e>
 80035f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035fa:	f7ff bd07 	b.w	800300c <__swbuf_r>
 80035fe:	6813      	ldr	r3, [r2, #0]
 8003600:	1c58      	adds	r0, r3, #1
 8003602:	6010      	str	r0, [r2, #0]
 8003604:	7019      	strb	r1, [r3, #0]
 8003606:	4608      	mov	r0, r1
 8003608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800360c:	4770      	bx	lr

0800360e <__sfputs_r>:
 800360e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003610:	4606      	mov	r6, r0
 8003612:	460f      	mov	r7, r1
 8003614:	4614      	mov	r4, r2
 8003616:	18d5      	adds	r5, r2, r3
 8003618:	42ac      	cmp	r4, r5
 800361a:	d101      	bne.n	8003620 <__sfputs_r+0x12>
 800361c:	2000      	movs	r0, #0
 800361e:	e007      	b.n	8003630 <__sfputs_r+0x22>
 8003620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003624:	463a      	mov	r2, r7
 8003626:	4630      	mov	r0, r6
 8003628:	f7ff ffda 	bl	80035e0 <__sfputc_r>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	d1f3      	bne.n	8003618 <__sfputs_r+0xa>
 8003630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003634 <_vfiprintf_r>:
 8003634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003638:	460d      	mov	r5, r1
 800363a:	b09d      	sub	sp, #116	; 0x74
 800363c:	4614      	mov	r4, r2
 800363e:	4698      	mov	r8, r3
 8003640:	4606      	mov	r6, r0
 8003642:	b118      	cbz	r0, 800364c <_vfiprintf_r+0x18>
 8003644:	6983      	ldr	r3, [r0, #24]
 8003646:	b90b      	cbnz	r3, 800364c <_vfiprintf_r+0x18>
 8003648:	f7ff feba 	bl	80033c0 <__sinit>
 800364c:	4b89      	ldr	r3, [pc, #548]	; (8003874 <_vfiprintf_r+0x240>)
 800364e:	429d      	cmp	r5, r3
 8003650:	d11b      	bne.n	800368a <_vfiprintf_r+0x56>
 8003652:	6875      	ldr	r5, [r6, #4]
 8003654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003656:	07d9      	lsls	r1, r3, #31
 8003658:	d405      	bmi.n	8003666 <_vfiprintf_r+0x32>
 800365a:	89ab      	ldrh	r3, [r5, #12]
 800365c:	059a      	lsls	r2, r3, #22
 800365e:	d402      	bmi.n	8003666 <_vfiprintf_r+0x32>
 8003660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003662:	f7ff ff4b 	bl	80034fc <__retarget_lock_acquire_recursive>
 8003666:	89ab      	ldrh	r3, [r5, #12]
 8003668:	071b      	lsls	r3, r3, #28
 800366a:	d501      	bpl.n	8003670 <_vfiprintf_r+0x3c>
 800366c:	692b      	ldr	r3, [r5, #16]
 800366e:	b9eb      	cbnz	r3, 80036ac <_vfiprintf_r+0x78>
 8003670:	4629      	mov	r1, r5
 8003672:	4630      	mov	r0, r6
 8003674:	f7ff fd1c 	bl	80030b0 <__swsetup_r>
 8003678:	b1c0      	cbz	r0, 80036ac <_vfiprintf_r+0x78>
 800367a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800367c:	07dc      	lsls	r4, r3, #31
 800367e:	d50e      	bpl.n	800369e <_vfiprintf_r+0x6a>
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	b01d      	add	sp, #116	; 0x74
 8003686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368a:	4b7b      	ldr	r3, [pc, #492]	; (8003878 <_vfiprintf_r+0x244>)
 800368c:	429d      	cmp	r5, r3
 800368e:	d101      	bne.n	8003694 <_vfiprintf_r+0x60>
 8003690:	68b5      	ldr	r5, [r6, #8]
 8003692:	e7df      	b.n	8003654 <_vfiprintf_r+0x20>
 8003694:	4b79      	ldr	r3, [pc, #484]	; (800387c <_vfiprintf_r+0x248>)
 8003696:	429d      	cmp	r5, r3
 8003698:	bf08      	it	eq
 800369a:	68f5      	ldreq	r5, [r6, #12]
 800369c:	e7da      	b.n	8003654 <_vfiprintf_r+0x20>
 800369e:	89ab      	ldrh	r3, [r5, #12]
 80036a0:	0598      	lsls	r0, r3, #22
 80036a2:	d4ed      	bmi.n	8003680 <_vfiprintf_r+0x4c>
 80036a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036a6:	f7ff ff2a 	bl	80034fe <__retarget_lock_release_recursive>
 80036aa:	e7e9      	b.n	8003680 <_vfiprintf_r+0x4c>
 80036ac:	2300      	movs	r3, #0
 80036ae:	9309      	str	r3, [sp, #36]	; 0x24
 80036b0:	2320      	movs	r3, #32
 80036b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80036ba:	2330      	movs	r3, #48	; 0x30
 80036bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003880 <_vfiprintf_r+0x24c>
 80036c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036c4:	f04f 0901 	mov.w	r9, #1
 80036c8:	4623      	mov	r3, r4
 80036ca:	469a      	mov	sl, r3
 80036cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036d0:	b10a      	cbz	r2, 80036d6 <_vfiprintf_r+0xa2>
 80036d2:	2a25      	cmp	r2, #37	; 0x25
 80036d4:	d1f9      	bne.n	80036ca <_vfiprintf_r+0x96>
 80036d6:	ebba 0b04 	subs.w	fp, sl, r4
 80036da:	d00b      	beq.n	80036f4 <_vfiprintf_r+0xc0>
 80036dc:	465b      	mov	r3, fp
 80036de:	4622      	mov	r2, r4
 80036e0:	4629      	mov	r1, r5
 80036e2:	4630      	mov	r0, r6
 80036e4:	f7ff ff93 	bl	800360e <__sfputs_r>
 80036e8:	3001      	adds	r0, #1
 80036ea:	f000 80aa 	beq.w	8003842 <_vfiprintf_r+0x20e>
 80036ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036f0:	445a      	add	r2, fp
 80036f2:	9209      	str	r2, [sp, #36]	; 0x24
 80036f4:	f89a 3000 	ldrb.w	r3, [sl]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a2 	beq.w	8003842 <_vfiprintf_r+0x20e>
 80036fe:	2300      	movs	r3, #0
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003708:	f10a 0a01 	add.w	sl, sl, #1
 800370c:	9304      	str	r3, [sp, #16]
 800370e:	9307      	str	r3, [sp, #28]
 8003710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003714:	931a      	str	r3, [sp, #104]	; 0x68
 8003716:	4654      	mov	r4, sl
 8003718:	2205      	movs	r2, #5
 800371a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800371e:	4858      	ldr	r0, [pc, #352]	; (8003880 <_vfiprintf_r+0x24c>)
 8003720:	f7fc fd76 	bl	8000210 <memchr>
 8003724:	9a04      	ldr	r2, [sp, #16]
 8003726:	b9d8      	cbnz	r0, 8003760 <_vfiprintf_r+0x12c>
 8003728:	06d1      	lsls	r1, r2, #27
 800372a:	bf44      	itt	mi
 800372c:	2320      	movmi	r3, #32
 800372e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003732:	0713      	lsls	r3, r2, #28
 8003734:	bf44      	itt	mi
 8003736:	232b      	movmi	r3, #43	; 0x2b
 8003738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800373c:	f89a 3000 	ldrb.w	r3, [sl]
 8003740:	2b2a      	cmp	r3, #42	; 0x2a
 8003742:	d015      	beq.n	8003770 <_vfiprintf_r+0x13c>
 8003744:	9a07      	ldr	r2, [sp, #28]
 8003746:	4654      	mov	r4, sl
 8003748:	2000      	movs	r0, #0
 800374a:	f04f 0c0a 	mov.w	ip, #10
 800374e:	4621      	mov	r1, r4
 8003750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003754:	3b30      	subs	r3, #48	; 0x30
 8003756:	2b09      	cmp	r3, #9
 8003758:	d94e      	bls.n	80037f8 <_vfiprintf_r+0x1c4>
 800375a:	b1b0      	cbz	r0, 800378a <_vfiprintf_r+0x156>
 800375c:	9207      	str	r2, [sp, #28]
 800375e:	e014      	b.n	800378a <_vfiprintf_r+0x156>
 8003760:	eba0 0308 	sub.w	r3, r0, r8
 8003764:	fa09 f303 	lsl.w	r3, r9, r3
 8003768:	4313      	orrs	r3, r2
 800376a:	9304      	str	r3, [sp, #16]
 800376c:	46a2      	mov	sl, r4
 800376e:	e7d2      	b.n	8003716 <_vfiprintf_r+0xe2>
 8003770:	9b03      	ldr	r3, [sp, #12]
 8003772:	1d19      	adds	r1, r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	9103      	str	r1, [sp, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	bfbb      	ittet	lt
 800377c:	425b      	neglt	r3, r3
 800377e:	f042 0202 	orrlt.w	r2, r2, #2
 8003782:	9307      	strge	r3, [sp, #28]
 8003784:	9307      	strlt	r3, [sp, #28]
 8003786:	bfb8      	it	lt
 8003788:	9204      	strlt	r2, [sp, #16]
 800378a:	7823      	ldrb	r3, [r4, #0]
 800378c:	2b2e      	cmp	r3, #46	; 0x2e
 800378e:	d10c      	bne.n	80037aa <_vfiprintf_r+0x176>
 8003790:	7863      	ldrb	r3, [r4, #1]
 8003792:	2b2a      	cmp	r3, #42	; 0x2a
 8003794:	d135      	bne.n	8003802 <_vfiprintf_r+0x1ce>
 8003796:	9b03      	ldr	r3, [sp, #12]
 8003798:	1d1a      	adds	r2, r3, #4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	9203      	str	r2, [sp, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bfb8      	it	lt
 80037a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80037a6:	3402      	adds	r4, #2
 80037a8:	9305      	str	r3, [sp, #20]
 80037aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003890 <_vfiprintf_r+0x25c>
 80037ae:	7821      	ldrb	r1, [r4, #0]
 80037b0:	2203      	movs	r2, #3
 80037b2:	4650      	mov	r0, sl
 80037b4:	f7fc fd2c 	bl	8000210 <memchr>
 80037b8:	b140      	cbz	r0, 80037cc <_vfiprintf_r+0x198>
 80037ba:	2340      	movs	r3, #64	; 0x40
 80037bc:	eba0 000a 	sub.w	r0, r0, sl
 80037c0:	fa03 f000 	lsl.w	r0, r3, r0
 80037c4:	9b04      	ldr	r3, [sp, #16]
 80037c6:	4303      	orrs	r3, r0
 80037c8:	3401      	adds	r4, #1
 80037ca:	9304      	str	r3, [sp, #16]
 80037cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d0:	482c      	ldr	r0, [pc, #176]	; (8003884 <_vfiprintf_r+0x250>)
 80037d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037d6:	2206      	movs	r2, #6
 80037d8:	f7fc fd1a 	bl	8000210 <memchr>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d03f      	beq.n	8003860 <_vfiprintf_r+0x22c>
 80037e0:	4b29      	ldr	r3, [pc, #164]	; (8003888 <_vfiprintf_r+0x254>)
 80037e2:	bb1b      	cbnz	r3, 800382c <_vfiprintf_r+0x1f8>
 80037e4:	9b03      	ldr	r3, [sp, #12]
 80037e6:	3307      	adds	r3, #7
 80037e8:	f023 0307 	bic.w	r3, r3, #7
 80037ec:	3308      	adds	r3, #8
 80037ee:	9303      	str	r3, [sp, #12]
 80037f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f2:	443b      	add	r3, r7
 80037f4:	9309      	str	r3, [sp, #36]	; 0x24
 80037f6:	e767      	b.n	80036c8 <_vfiprintf_r+0x94>
 80037f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80037fc:	460c      	mov	r4, r1
 80037fe:	2001      	movs	r0, #1
 8003800:	e7a5      	b.n	800374e <_vfiprintf_r+0x11a>
 8003802:	2300      	movs	r3, #0
 8003804:	3401      	adds	r4, #1
 8003806:	9305      	str	r3, [sp, #20]
 8003808:	4619      	mov	r1, r3
 800380a:	f04f 0c0a 	mov.w	ip, #10
 800380e:	4620      	mov	r0, r4
 8003810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003814:	3a30      	subs	r2, #48	; 0x30
 8003816:	2a09      	cmp	r2, #9
 8003818:	d903      	bls.n	8003822 <_vfiprintf_r+0x1ee>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0c5      	beq.n	80037aa <_vfiprintf_r+0x176>
 800381e:	9105      	str	r1, [sp, #20]
 8003820:	e7c3      	b.n	80037aa <_vfiprintf_r+0x176>
 8003822:	fb0c 2101 	mla	r1, ip, r1, r2
 8003826:	4604      	mov	r4, r0
 8003828:	2301      	movs	r3, #1
 800382a:	e7f0      	b.n	800380e <_vfiprintf_r+0x1da>
 800382c:	ab03      	add	r3, sp, #12
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	462a      	mov	r2, r5
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <_vfiprintf_r+0x258>)
 8003834:	a904      	add	r1, sp, #16
 8003836:	4630      	mov	r0, r6
 8003838:	f3af 8000 	nop.w
 800383c:	4607      	mov	r7, r0
 800383e:	1c78      	adds	r0, r7, #1
 8003840:	d1d6      	bne.n	80037f0 <_vfiprintf_r+0x1bc>
 8003842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003844:	07d9      	lsls	r1, r3, #31
 8003846:	d405      	bmi.n	8003854 <_vfiprintf_r+0x220>
 8003848:	89ab      	ldrh	r3, [r5, #12]
 800384a:	059a      	lsls	r2, r3, #22
 800384c:	d402      	bmi.n	8003854 <_vfiprintf_r+0x220>
 800384e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003850:	f7ff fe55 	bl	80034fe <__retarget_lock_release_recursive>
 8003854:	89ab      	ldrh	r3, [r5, #12]
 8003856:	065b      	lsls	r3, r3, #25
 8003858:	f53f af12 	bmi.w	8003680 <_vfiprintf_r+0x4c>
 800385c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800385e:	e711      	b.n	8003684 <_vfiprintf_r+0x50>
 8003860:	ab03      	add	r3, sp, #12
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	462a      	mov	r2, r5
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <_vfiprintf_r+0x258>)
 8003868:	a904      	add	r1, sp, #16
 800386a:	4630      	mov	r0, r6
 800386c:	f000 f880 	bl	8003970 <_printf_i>
 8003870:	e7e4      	b.n	800383c <_vfiprintf_r+0x208>
 8003872:	bf00      	nop
 8003874:	08004690 	.word	0x08004690
 8003878:	080046b0 	.word	0x080046b0
 800387c:	08004670 	.word	0x08004670
 8003880:	080046d0 	.word	0x080046d0
 8003884:	080046da 	.word	0x080046da
 8003888:	00000000 	.word	0x00000000
 800388c:	0800360f 	.word	0x0800360f
 8003890:	080046d6 	.word	0x080046d6

08003894 <_printf_common>:
 8003894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	4616      	mov	r6, r2
 800389a:	4699      	mov	r9, r3
 800389c:	688a      	ldr	r2, [r1, #8]
 800389e:	690b      	ldr	r3, [r1, #16]
 80038a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bfb8      	it	lt
 80038a8:	4613      	movlt	r3, r2
 80038aa:	6033      	str	r3, [r6, #0]
 80038ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b0:	4607      	mov	r7, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	b10a      	cbz	r2, 80038ba <_printf_common+0x26>
 80038b6:	3301      	adds	r3, #1
 80038b8:	6033      	str	r3, [r6, #0]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	0699      	lsls	r1, r3, #26
 80038be:	bf42      	ittt	mi
 80038c0:	6833      	ldrmi	r3, [r6, #0]
 80038c2:	3302      	addmi	r3, #2
 80038c4:	6033      	strmi	r3, [r6, #0]
 80038c6:	6825      	ldr	r5, [r4, #0]
 80038c8:	f015 0506 	ands.w	r5, r5, #6
 80038cc:	d106      	bne.n	80038dc <_printf_common+0x48>
 80038ce:	f104 0a19 	add.w	sl, r4, #25
 80038d2:	68e3      	ldr	r3, [r4, #12]
 80038d4:	6832      	ldr	r2, [r6, #0]
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	42ab      	cmp	r3, r5
 80038da:	dc26      	bgt.n	800392a <_printf_common+0x96>
 80038dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038e0:	1e13      	subs	r3, r2, #0
 80038e2:	6822      	ldr	r2, [r4, #0]
 80038e4:	bf18      	it	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	0692      	lsls	r2, r2, #26
 80038ea:	d42b      	bmi.n	8003944 <_printf_common+0xb0>
 80038ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038f0:	4649      	mov	r1, r9
 80038f2:	4638      	mov	r0, r7
 80038f4:	47c0      	blx	r8
 80038f6:	3001      	adds	r0, #1
 80038f8:	d01e      	beq.n	8003938 <_printf_common+0xa4>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	68e5      	ldr	r5, [r4, #12]
 80038fe:	6832      	ldr	r2, [r6, #0]
 8003900:	f003 0306 	and.w	r3, r3, #6
 8003904:	2b04      	cmp	r3, #4
 8003906:	bf08      	it	eq
 8003908:	1aad      	subeq	r5, r5, r2
 800390a:	68a3      	ldr	r3, [r4, #8]
 800390c:	6922      	ldr	r2, [r4, #16]
 800390e:	bf0c      	ite	eq
 8003910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003914:	2500      	movne	r5, #0
 8003916:	4293      	cmp	r3, r2
 8003918:	bfc4      	itt	gt
 800391a:	1a9b      	subgt	r3, r3, r2
 800391c:	18ed      	addgt	r5, r5, r3
 800391e:	2600      	movs	r6, #0
 8003920:	341a      	adds	r4, #26
 8003922:	42b5      	cmp	r5, r6
 8003924:	d11a      	bne.n	800395c <_printf_common+0xc8>
 8003926:	2000      	movs	r0, #0
 8003928:	e008      	b.n	800393c <_printf_common+0xa8>
 800392a:	2301      	movs	r3, #1
 800392c:	4652      	mov	r2, sl
 800392e:	4649      	mov	r1, r9
 8003930:	4638      	mov	r0, r7
 8003932:	47c0      	blx	r8
 8003934:	3001      	adds	r0, #1
 8003936:	d103      	bne.n	8003940 <_printf_common+0xac>
 8003938:	f04f 30ff 	mov.w	r0, #4294967295
 800393c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003940:	3501      	adds	r5, #1
 8003942:	e7c6      	b.n	80038d2 <_printf_common+0x3e>
 8003944:	18e1      	adds	r1, r4, r3
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	2030      	movs	r0, #48	; 0x30
 800394a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800394e:	4422      	add	r2, r4
 8003950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003958:	3302      	adds	r3, #2
 800395a:	e7c7      	b.n	80038ec <_printf_common+0x58>
 800395c:	2301      	movs	r3, #1
 800395e:	4622      	mov	r2, r4
 8003960:	4649      	mov	r1, r9
 8003962:	4638      	mov	r0, r7
 8003964:	47c0      	blx	r8
 8003966:	3001      	adds	r0, #1
 8003968:	d0e6      	beq.n	8003938 <_printf_common+0xa4>
 800396a:	3601      	adds	r6, #1
 800396c:	e7d9      	b.n	8003922 <_printf_common+0x8e>
	...

08003970 <_printf_i>:
 8003970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003974:	460c      	mov	r4, r1
 8003976:	4691      	mov	r9, r2
 8003978:	7e27      	ldrb	r7, [r4, #24]
 800397a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800397c:	2f78      	cmp	r7, #120	; 0x78
 800397e:	4680      	mov	r8, r0
 8003980:	469a      	mov	sl, r3
 8003982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003986:	d807      	bhi.n	8003998 <_printf_i+0x28>
 8003988:	2f62      	cmp	r7, #98	; 0x62
 800398a:	d80a      	bhi.n	80039a2 <_printf_i+0x32>
 800398c:	2f00      	cmp	r7, #0
 800398e:	f000 80d8 	beq.w	8003b42 <_printf_i+0x1d2>
 8003992:	2f58      	cmp	r7, #88	; 0x58
 8003994:	f000 80a3 	beq.w	8003ade <_printf_i+0x16e>
 8003998:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800399c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039a0:	e03a      	b.n	8003a18 <_printf_i+0xa8>
 80039a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039a6:	2b15      	cmp	r3, #21
 80039a8:	d8f6      	bhi.n	8003998 <_printf_i+0x28>
 80039aa:	a001      	add	r0, pc, #4	; (adr r0, 80039b0 <_printf_i+0x40>)
 80039ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80039b0:	08003a09 	.word	0x08003a09
 80039b4:	08003a1d 	.word	0x08003a1d
 80039b8:	08003999 	.word	0x08003999
 80039bc:	08003999 	.word	0x08003999
 80039c0:	08003999 	.word	0x08003999
 80039c4:	08003999 	.word	0x08003999
 80039c8:	08003a1d 	.word	0x08003a1d
 80039cc:	08003999 	.word	0x08003999
 80039d0:	08003999 	.word	0x08003999
 80039d4:	08003999 	.word	0x08003999
 80039d8:	08003999 	.word	0x08003999
 80039dc:	08003b29 	.word	0x08003b29
 80039e0:	08003a4d 	.word	0x08003a4d
 80039e4:	08003b0b 	.word	0x08003b0b
 80039e8:	08003999 	.word	0x08003999
 80039ec:	08003999 	.word	0x08003999
 80039f0:	08003b4b 	.word	0x08003b4b
 80039f4:	08003999 	.word	0x08003999
 80039f8:	08003a4d 	.word	0x08003a4d
 80039fc:	08003999 	.word	0x08003999
 8003a00:	08003999 	.word	0x08003999
 8003a04:	08003b13 	.word	0x08003b13
 8003a08:	680b      	ldr	r3, [r1, #0]
 8003a0a:	1d1a      	adds	r2, r3, #4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	600a      	str	r2, [r1, #0]
 8003a10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0a3      	b.n	8003b64 <_printf_i+0x1f4>
 8003a1c:	6825      	ldr	r5, [r4, #0]
 8003a1e:	6808      	ldr	r0, [r1, #0]
 8003a20:	062e      	lsls	r6, r5, #24
 8003a22:	f100 0304 	add.w	r3, r0, #4
 8003a26:	d50a      	bpl.n	8003a3e <_printf_i+0xce>
 8003a28:	6805      	ldr	r5, [r0, #0]
 8003a2a:	600b      	str	r3, [r1, #0]
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	da03      	bge.n	8003a38 <_printf_i+0xc8>
 8003a30:	232d      	movs	r3, #45	; 0x2d
 8003a32:	426d      	negs	r5, r5
 8003a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a38:	485e      	ldr	r0, [pc, #376]	; (8003bb4 <_printf_i+0x244>)
 8003a3a:	230a      	movs	r3, #10
 8003a3c:	e019      	b.n	8003a72 <_printf_i+0x102>
 8003a3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a42:	6805      	ldr	r5, [r0, #0]
 8003a44:	600b      	str	r3, [r1, #0]
 8003a46:	bf18      	it	ne
 8003a48:	b22d      	sxthne	r5, r5
 8003a4a:	e7ef      	b.n	8003a2c <_printf_i+0xbc>
 8003a4c:	680b      	ldr	r3, [r1, #0]
 8003a4e:	6825      	ldr	r5, [r4, #0]
 8003a50:	1d18      	adds	r0, r3, #4
 8003a52:	6008      	str	r0, [r1, #0]
 8003a54:	0628      	lsls	r0, r5, #24
 8003a56:	d501      	bpl.n	8003a5c <_printf_i+0xec>
 8003a58:	681d      	ldr	r5, [r3, #0]
 8003a5a:	e002      	b.n	8003a62 <_printf_i+0xf2>
 8003a5c:	0669      	lsls	r1, r5, #25
 8003a5e:	d5fb      	bpl.n	8003a58 <_printf_i+0xe8>
 8003a60:	881d      	ldrh	r5, [r3, #0]
 8003a62:	4854      	ldr	r0, [pc, #336]	; (8003bb4 <_printf_i+0x244>)
 8003a64:	2f6f      	cmp	r7, #111	; 0x6f
 8003a66:	bf0c      	ite	eq
 8003a68:	2308      	moveq	r3, #8
 8003a6a:	230a      	movne	r3, #10
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a72:	6866      	ldr	r6, [r4, #4]
 8003a74:	60a6      	str	r6, [r4, #8]
 8003a76:	2e00      	cmp	r6, #0
 8003a78:	bfa2      	ittt	ge
 8003a7a:	6821      	ldrge	r1, [r4, #0]
 8003a7c:	f021 0104 	bicge.w	r1, r1, #4
 8003a80:	6021      	strge	r1, [r4, #0]
 8003a82:	b90d      	cbnz	r5, 8003a88 <_printf_i+0x118>
 8003a84:	2e00      	cmp	r6, #0
 8003a86:	d04d      	beq.n	8003b24 <_printf_i+0x1b4>
 8003a88:	4616      	mov	r6, r2
 8003a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8003a92:	5dc7      	ldrb	r7, [r0, r7]
 8003a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a98:	462f      	mov	r7, r5
 8003a9a:	42bb      	cmp	r3, r7
 8003a9c:	460d      	mov	r5, r1
 8003a9e:	d9f4      	bls.n	8003a8a <_printf_i+0x11a>
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d10b      	bne.n	8003abc <_printf_i+0x14c>
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	07df      	lsls	r7, r3, #31
 8003aa8:	d508      	bpl.n	8003abc <_printf_i+0x14c>
 8003aaa:	6923      	ldr	r3, [r4, #16]
 8003aac:	6861      	ldr	r1, [r4, #4]
 8003aae:	4299      	cmp	r1, r3
 8003ab0:	bfde      	ittt	le
 8003ab2:	2330      	movle	r3, #48	; 0x30
 8003ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ab8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003abc:	1b92      	subs	r2, r2, r6
 8003abe:	6122      	str	r2, [r4, #16]
 8003ac0:	f8cd a000 	str.w	sl, [sp]
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	aa03      	add	r2, sp, #12
 8003ac8:	4621      	mov	r1, r4
 8003aca:	4640      	mov	r0, r8
 8003acc:	f7ff fee2 	bl	8003894 <_printf_common>
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	d14c      	bne.n	8003b6e <_printf_i+0x1fe>
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	b004      	add	sp, #16
 8003ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ade:	4835      	ldr	r0, [pc, #212]	; (8003bb4 <_printf_i+0x244>)
 8003ae0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	680e      	ldr	r6, [r1, #0]
 8003ae8:	061f      	lsls	r7, r3, #24
 8003aea:	f856 5b04 	ldr.w	r5, [r6], #4
 8003aee:	600e      	str	r6, [r1, #0]
 8003af0:	d514      	bpl.n	8003b1c <_printf_i+0x1ac>
 8003af2:	07d9      	lsls	r1, r3, #31
 8003af4:	bf44      	itt	mi
 8003af6:	f043 0320 	orrmi.w	r3, r3, #32
 8003afa:	6023      	strmi	r3, [r4, #0]
 8003afc:	b91d      	cbnz	r5, 8003b06 <_printf_i+0x196>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	f023 0320 	bic.w	r3, r3, #32
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	2310      	movs	r3, #16
 8003b08:	e7b0      	b.n	8003a6c <_printf_i+0xfc>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	f043 0320 	orr.w	r3, r3, #32
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	2378      	movs	r3, #120	; 0x78
 8003b14:	4828      	ldr	r0, [pc, #160]	; (8003bb8 <_printf_i+0x248>)
 8003b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b1a:	e7e3      	b.n	8003ae4 <_printf_i+0x174>
 8003b1c:	065e      	lsls	r6, r3, #25
 8003b1e:	bf48      	it	mi
 8003b20:	b2ad      	uxthmi	r5, r5
 8003b22:	e7e6      	b.n	8003af2 <_printf_i+0x182>
 8003b24:	4616      	mov	r6, r2
 8003b26:	e7bb      	b.n	8003aa0 <_printf_i+0x130>
 8003b28:	680b      	ldr	r3, [r1, #0]
 8003b2a:	6826      	ldr	r6, [r4, #0]
 8003b2c:	6960      	ldr	r0, [r4, #20]
 8003b2e:	1d1d      	adds	r5, r3, #4
 8003b30:	600d      	str	r5, [r1, #0]
 8003b32:	0635      	lsls	r5, r6, #24
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	d501      	bpl.n	8003b3c <_printf_i+0x1cc>
 8003b38:	6018      	str	r0, [r3, #0]
 8003b3a:	e002      	b.n	8003b42 <_printf_i+0x1d2>
 8003b3c:	0671      	lsls	r1, r6, #25
 8003b3e:	d5fb      	bpl.n	8003b38 <_printf_i+0x1c8>
 8003b40:	8018      	strh	r0, [r3, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	6123      	str	r3, [r4, #16]
 8003b46:	4616      	mov	r6, r2
 8003b48:	e7ba      	b.n	8003ac0 <_printf_i+0x150>
 8003b4a:	680b      	ldr	r3, [r1, #0]
 8003b4c:	1d1a      	adds	r2, r3, #4
 8003b4e:	600a      	str	r2, [r1, #0]
 8003b50:	681e      	ldr	r6, [r3, #0]
 8003b52:	6862      	ldr	r2, [r4, #4]
 8003b54:	2100      	movs	r1, #0
 8003b56:	4630      	mov	r0, r6
 8003b58:	f7fc fb5a 	bl	8000210 <memchr>
 8003b5c:	b108      	cbz	r0, 8003b62 <_printf_i+0x1f2>
 8003b5e:	1b80      	subs	r0, r0, r6
 8003b60:	6060      	str	r0, [r4, #4]
 8003b62:	6863      	ldr	r3, [r4, #4]
 8003b64:	6123      	str	r3, [r4, #16]
 8003b66:	2300      	movs	r3, #0
 8003b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b6c:	e7a8      	b.n	8003ac0 <_printf_i+0x150>
 8003b6e:	6923      	ldr	r3, [r4, #16]
 8003b70:	4632      	mov	r2, r6
 8003b72:	4649      	mov	r1, r9
 8003b74:	4640      	mov	r0, r8
 8003b76:	47d0      	blx	sl
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d0ab      	beq.n	8003ad4 <_printf_i+0x164>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	079b      	lsls	r3, r3, #30
 8003b80:	d413      	bmi.n	8003baa <_printf_i+0x23a>
 8003b82:	68e0      	ldr	r0, [r4, #12]
 8003b84:	9b03      	ldr	r3, [sp, #12]
 8003b86:	4298      	cmp	r0, r3
 8003b88:	bfb8      	it	lt
 8003b8a:	4618      	movlt	r0, r3
 8003b8c:	e7a4      	b.n	8003ad8 <_printf_i+0x168>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4632      	mov	r2, r6
 8003b92:	4649      	mov	r1, r9
 8003b94:	4640      	mov	r0, r8
 8003b96:	47d0      	blx	sl
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d09b      	beq.n	8003ad4 <_printf_i+0x164>
 8003b9c:	3501      	adds	r5, #1
 8003b9e:	68e3      	ldr	r3, [r4, #12]
 8003ba0:	9903      	ldr	r1, [sp, #12]
 8003ba2:	1a5b      	subs	r3, r3, r1
 8003ba4:	42ab      	cmp	r3, r5
 8003ba6:	dcf2      	bgt.n	8003b8e <_printf_i+0x21e>
 8003ba8:	e7eb      	b.n	8003b82 <_printf_i+0x212>
 8003baa:	2500      	movs	r5, #0
 8003bac:	f104 0619 	add.w	r6, r4, #25
 8003bb0:	e7f5      	b.n	8003b9e <_printf_i+0x22e>
 8003bb2:	bf00      	nop
 8003bb4:	080046e1 	.word	0x080046e1
 8003bb8:	080046f2 	.word	0x080046f2

08003bbc <__sread>:
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc4:	f000 f894 	bl	8003cf0 <_read_r>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	bfab      	itete	ge
 8003bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bce:	89a3      	ldrhlt	r3, [r4, #12]
 8003bd0:	181b      	addge	r3, r3, r0
 8003bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bd6:	bfac      	ite	ge
 8003bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bda:	81a3      	strhlt	r3, [r4, #12]
 8003bdc:	bd10      	pop	{r4, pc}

08003bde <__swrite>:
 8003bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be2:	461f      	mov	r7, r3
 8003be4:	898b      	ldrh	r3, [r1, #12]
 8003be6:	05db      	lsls	r3, r3, #23
 8003be8:	4605      	mov	r5, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	4616      	mov	r6, r2
 8003bee:	d505      	bpl.n	8003bfc <__swrite+0x1e>
 8003bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f000 f868 	bl	8003ccc <_lseek_r>
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	4632      	mov	r2, r6
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c12:	f000 b817 	b.w	8003c44 <_write_r>

08003c16 <__sseek>:
 8003c16:	b510      	push	{r4, lr}
 8003c18:	460c      	mov	r4, r1
 8003c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c1e:	f000 f855 	bl	8003ccc <_lseek_r>
 8003c22:	1c43      	adds	r3, r0, #1
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	bf15      	itete	ne
 8003c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c32:	81a3      	strheq	r3, [r4, #12]
 8003c34:	bf18      	it	ne
 8003c36:	81a3      	strhne	r3, [r4, #12]
 8003c38:	bd10      	pop	{r4, pc}

08003c3a <__sclose>:
 8003c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c3e:	f000 b813 	b.w	8003c68 <_close_r>
	...

08003c44 <_write_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4d07      	ldr	r5, [pc, #28]	; (8003c64 <_write_r+0x20>)
 8003c48:	4604      	mov	r4, r0
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	602a      	str	r2, [r5, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f7fd fc0f 	bl	8001476 <_write>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_write_r+0x1e>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_write_r+0x1e>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	20000e98 	.word	0x20000e98

08003c68 <_close_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4d06      	ldr	r5, [pc, #24]	; (8003c84 <_close_r+0x1c>)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	4604      	mov	r4, r0
 8003c70:	4608      	mov	r0, r1
 8003c72:	602b      	str	r3, [r5, #0]
 8003c74:	f7fd fc1b 	bl	80014ae <_close>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	d102      	bne.n	8003c82 <_close_r+0x1a>
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	b103      	cbz	r3, 8003c82 <_close_r+0x1a>
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	20000e98 	.word	0x20000e98

08003c88 <_fstat_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	4d07      	ldr	r5, [pc, #28]	; (8003ca8 <_fstat_r+0x20>)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	4611      	mov	r1, r2
 8003c94:	602b      	str	r3, [r5, #0]
 8003c96:	f7fd fc16 	bl	80014c6 <_fstat>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	d102      	bne.n	8003ca4 <_fstat_r+0x1c>
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	b103      	cbz	r3, 8003ca4 <_fstat_r+0x1c>
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	bd38      	pop	{r3, r4, r5, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000e98 	.word	0x20000e98

08003cac <_isatty_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	4d06      	ldr	r5, [pc, #24]	; (8003cc8 <_isatty_r+0x1c>)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	602b      	str	r3, [r5, #0]
 8003cb8:	f7fd fc15 	bl	80014e6 <_isatty>
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	d102      	bne.n	8003cc6 <_isatty_r+0x1a>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	b103      	cbz	r3, 8003cc6 <_isatty_r+0x1a>
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	bd38      	pop	{r3, r4, r5, pc}
 8003cc8:	20000e98 	.word	0x20000e98

08003ccc <_lseek_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4d07      	ldr	r5, [pc, #28]	; (8003cec <_lseek_r+0x20>)
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	4608      	mov	r0, r1
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	602a      	str	r2, [r5, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f7fd fc0e 	bl	80014fc <_lseek>
 8003ce0:	1c43      	adds	r3, r0, #1
 8003ce2:	d102      	bne.n	8003cea <_lseek_r+0x1e>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	b103      	cbz	r3, 8003cea <_lseek_r+0x1e>
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	bd38      	pop	{r3, r4, r5, pc}
 8003cec:	20000e98 	.word	0x20000e98

08003cf0 <_read_r>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	4d07      	ldr	r5, [pc, #28]	; (8003d10 <_read_r+0x20>)
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	602a      	str	r2, [r5, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f7fd fb9c 	bl	800143c <_read>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d102      	bne.n	8003d0e <_read_r+0x1e>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b103      	cbz	r3, 8003d0e <_read_r+0x1e>
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	20000e98 	.word	0x20000e98

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
